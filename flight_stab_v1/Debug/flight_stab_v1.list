
flight_stab_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006910  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af0  08006af0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006af0  08006af0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006af0  08006af0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  08006b04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08006b04  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014600  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dee  00000000  00000000  0003463c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c8  00000000  00000000  00037430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  000385f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001de54  00000000  00000000  00039638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef28  00000000  00000000  0005748c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0ca5  00000000  00000000  000663b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00107059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b4c  00000000  00000000  001070d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a80 	.word	0x08006a80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006a80 	.word	0x08006a80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <_ZN3PIDC1Ev>:
 *      Author: d
 */

#include "PIDlib.h"

PID::PID(){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	pid_Kp = 0;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f04f 0200 	mov.w	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
	pid_Ki = 0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
	pid_Kd = 0;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
	pid_windup_max = 0;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
	pid_error_old = 0;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
	pid_integral = 0;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
}
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_ZN3PID6updateEf>:

float PID::update(float error){
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	ed87 0a00 	vstr	s0, [r7]
	float out;

	out = pid_Kp * error;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	edd3 7a00 	vldr	s15, [r3]
 8000b6c:	ed97 7a00 	vldr	s14, [r7]
 8000b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b74:	edc7 7a03 	vstr	s15, [r7, #12]

	pid_integral += error;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b7e:	edd7 7a00 	vldr	s15, [r7]
 8000b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	edc3 7a05 	vstr	s15, [r3, #20]
	if(pid_integral > pid_windup_max)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba0:	dd03      	ble.n	8000baa <_ZN3PID6updateEf+0x50>
		pid_integral = pid_windup_max;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68da      	ldr	r2, [r3, #12]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	615a      	str	r2, [r3, #20]
	if(pid_integral < -pid_windup_max)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	ed93 7a05 	vldr	s14, [r3, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bb6:	eef1 7a67 	vneg.f32	s15, s15
 8000bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d507      	bpl.n	8000bd4 <_ZN3PID6updateEf+0x7a>
		pid_integral = -pid_windup_max;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bca:	eef1 7a67 	vneg.f32	s15, s15
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	edc3 7a05 	vstr	s15, [r3, #20]
	out += pid_Ki * pid_integral;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	edd3 7a05 	vldr	s15, [r3, #20]
 8000be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000be4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bec:	edc7 7a03 	vstr	s15, [r7, #12]

	out += pid_Kd * (error - pid_error_old);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bfc:	edd7 6a00 	vldr	s13, [r7]
 8000c00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c08:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c10:	edc7 7a03 	vstr	s15, [r7, #12]
	pid_error_old = error;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	611a      	str	r2, [r3, #16]

	return out;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	ee07 3a90 	vmov	s15, r3
}
 8000c20:	eeb0 0a67 	vmov.f32	s0, s15
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_ZN3PID9setPidAllEffff>:

void PID::setPidWindupMax(float pidWindupMax) {
	pid_windup_max = pidWindupMax;
}

void PID::setPidAll(const float Kp, const float Ki, const float Kd, const float windup_max){
 8000c2e:	b480      	push	{r7}
 8000c30:	b087      	sub	sp, #28
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6178      	str	r0, [r7, #20]
 8000c36:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c3a:	edc7 0a03 	vstr	s1, [r7, #12]
 8000c3e:	ed87 1a02 	vstr	s2, [r7, #8]
 8000c42:	edc7 1a01 	vstr	s3, [r7, #4]
	pid_Kp = Kp;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	601a      	str	r2, [r3, #0]
	pid_Ki = Ki;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	605a      	str	r2, [r3, #4]
	pid_Kd = Kd;
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	609a      	str	r2, [r3, #8]
	pid_windup_max = windup_max;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	60da      	str	r2, [r3, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	371c      	adds	r7, #28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_ZN5ServoC1EtttPVm>:
 *      Author: d
 */

#include "servo.h"

Servo::Servo(uint16_t min, uint16_t max, uint16_t center, volatile uint32_t *pwm_out){
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	4603      	mov	r3, r0
 8000c7a:	817b      	strh	r3, [r7, #10]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	813b      	strh	r3, [r7, #8]
 8000c80:	4613      	mov	r3, r2
 8000c82:	80fb      	strh	r3, [r7, #6]
	min_rel = min - center;
 8000c84:	897a      	ldrh	r2, [r7, #10]
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	801a      	strh	r2, [r3, #0]
	max_rel = max - center;
 8000c92:	893a      	ldrh	r2, [r7, #8]
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	805a      	strh	r2, [r3, #2]
	this->center = center;
 8000ca0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	809a      	strh	r2, [r3, #4]
	this->pwm_out = pwm_out;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	609a      	str	r2, [r3, #8]

	*pwm_out = center;
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_ZN5Servo8set_normEf>:

void Servo::set_us(uint16_t servo){
	*pwm_out = servo;
}

void Servo::set_norm(float servo){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	ed87 0a00 	vstr	s0, [r7]
	if(servo>1)
 8000cd0:	edd7 7a00 	vldr	s15, [r7]
 8000cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce0:	dd03      	ble.n	8000cea <_ZN5Servo8set_normEf+0x26>
		servo = 1;
 8000ce2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	e00a      	b.n	8000d00 <_ZN5Servo8set_normEf+0x3c>
	else if(servo<-1)
 8000cea:	edd7 7a00 	vldr	s15, [r7]
 8000cee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfa:	d501      	bpl.n	8000d00 <_ZN5Servo8set_normEf+0x3c>
		servo = -1;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <_ZN5Servo8set_normEf+0xc4>)
 8000cfe:	603b      	str	r3, [r7, #0]

	if (servo > 0) {
 8000d00:	edd7 7a00 	vldr	s15, [r7]
 8000d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	dd1b      	ble.n	8000d46 <_ZN5Servo8set_normEf+0x82>
		*pwm_out = center + (max_rel * servo);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d2a:	edd7 7a00 	vldr	s15, [r7]
 8000d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d3e:	ee17 2a90 	vmov	r2, s15
 8000d42:	601a      	str	r2, [r3, #0]
	} else {
		*pwm_out = center - (min_rel * servo);
	}
}
 8000d44:	e01a      	b.n	8000d7c <_ZN5Servo8set_normEf+0xb8>
		*pwm_out = center - (min_rel * servo);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d62:	edd7 7a00 	vldr	s15, [r7]
 8000d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d76:	ee17 2a90 	vmov	r2, s15
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	bf800000 	.word	0xbf800000

08000d8c <buzzer_enqueue>:
volatile uint8_t queue_len = 0;
volatile uint8_t running = 0;

extern TIM_HandleTypeDef htim6;

char buzzer_enqueue(buzzer_state_type state, uint16_t duration){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	460a      	mov	r2, r1
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	80bb      	strh	r3, [r7, #4]
	if(queue_len < BUZZER_QUEUE_SIZE){
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <buzzer_enqueue+0x94>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b0e      	cmp	r3, #14
 8000da4:	d837      	bhi.n	8000e16 <buzzer_enqueue+0x8a>
		queue[queue_wpos].duration = duration;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <buzzer_enqueue+0x98>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <buzzer_enqueue+0x9c>)
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
		queue[queue_wpos].state = state;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <buzzer_enqueue+0x98>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <buzzer_enqueue+0x9c>)
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	709a      	strb	r2, [r3, #2]
		queue_wpos++;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <buzzer_enqueue+0x98>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <buzzer_enqueue+0x98>)
 8000dd2:	701a      	strb	r2, [r3, #0]
		queue_len++;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <buzzer_enqueue+0x94>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <buzzer_enqueue+0x94>)
 8000de0:	701a      	strb	r2, [r3, #0]
		queue_wpos %= BUZZER_QUEUE_SIZE;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <buzzer_enqueue+0x98>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <buzzer_enqueue+0xa0>)
 8000dea:	fba3 1302 	umull	r1, r3, r3, r2
 8000dee:	08d9      	lsrs	r1, r3, #3
 8000df0:	460b      	mov	r3, r1
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <buzzer_enqueue+0x98>)
 8000dfc:	701a      	strb	r2, [r3, #0]
		if(running == 0){
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <buzzer_enqueue+0xa4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d104      	bne.n	8000e12 <buzzer_enqueue+0x86>
			running = 1;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <buzzer_enqueue+0xa4>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
			buzzer_next();
 8000e0e:	f000 f811 	bl	8000e34 <buzzer_next>
		}
		return 1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <buzzer_enqueue+0x8c>
	} else
		return 0;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000066 	.word	0x20000066
 8000e24:	20000065 	.word	0x20000065
 8000e28:	20000028 	.word	0x20000028
 8000e2c:	88888889 	.word	0x88888889
 8000e30:	20000067 	.word	0x20000067

08000e34 <buzzer_next>:

void buzzer_next(){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	if(queue_len == 0){
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <buzzer_next+0xc8>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d103      	bne.n	8000e4a <buzzer_next+0x16>
		running = 0;
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <buzzer_next+0xcc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
		return;
 8000e48:	e057      	b.n	8000efa <buzzer_next+0xc6>
	}

	if(queue[queue_rpos].state == BUZZER_ON){
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <buzzer_next+0xd0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <buzzer_next+0xd4>)
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	789b      	ldrb	r3, [r3, #2]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d106      	bne.n	8000e6c <buzzer_next+0x38>
		BUZZER_ON_ACTION;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e64:	4829      	ldr	r0, [pc, #164]	; (8000f0c <buzzer_next+0xd8>)
 8000e66:	f002 f89b 	bl	8002fa0 <HAL_GPIO_WritePin>
 8000e6a:	e005      	b.n	8000e78 <buzzer_next+0x44>
	}else{
		BUZZER_OFF_ACTION;
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	4826      	ldr	r0, [pc, #152]	; (8000f0c <buzzer_next+0xd8>)
 8000e74:	f002 f894 	bl	8002fa0 <HAL_GPIO_WritePin>
	}

	if(queue[queue_rpos].duration < 2)
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <buzzer_next+0xd0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <buzzer_next+0xd4>)
 8000e82:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d807      	bhi.n	8000e9c <buzzer_next+0x68>
		queue[queue_rpos].duration = 2;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <buzzer_next+0xd0>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <buzzer_next+0xd4>)
 8000e96:	2102      	movs	r1, #2
 8000e98:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
	//if(queue[queue_rpos].duration > 0){
		htim6.Instance->SR = 0;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <buzzer_next+0xdc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
		htim6.Instance->ARR = queue[queue_rpos].duration-1;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <buzzer_next+0xd0>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <buzzer_next+0xd4>)
 8000eae:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <buzzer_next+0xdc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start_IT(&htim6);
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <buzzer_next+0xdc>)
 8000ebe:	f004 f8b7 	bl	8005030 <HAL_TIM_Base_Start_IT>
	//}
	queue_rpos++;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <buzzer_next+0xd0>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <buzzer_next+0xd0>)
 8000ece:	701a      	strb	r2, [r3, #0]
	queue_rpos %= BUZZER_QUEUE_SIZE;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <buzzer_next+0xd0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <buzzer_next+0xe0>)
 8000ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8000edc:	08d9      	lsrs	r1, r3, #3
 8000ede:	460b      	mov	r3, r1
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	1a5b      	subs	r3, r3, r1
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <buzzer_next+0xd0>)
 8000eea:	701a      	strb	r2, [r3, #0]
	queue_len--;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <buzzer_next+0xc8>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b01      	ldr	r3, [pc, #4]	; (8000efc <buzzer_next+0xc8>)
 8000ef8:	701a      	strb	r2, [r3, #0]
}
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000066 	.word	0x20000066
 8000f00:	20000067 	.word	0x20000067
 8000f04:	20000064 	.word	0x20000064
 8000f08:	20000028 	.word	0x20000028
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	20000178 	.word	0x20000178
 8000f14:	88888889 	.word	0x88888889

08000f18 <buzzer_wait>:

void buzzer_wait(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	while(running)
 8000f1c:	e002      	b.n	8000f24 <buzzer_wait+0xc>
		HAL_Delay(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f001 fd3a 	bl	8002998 <HAL_Delay>
	while(running)
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <buzzer_wait+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f7      	bne.n	8000f1e <buzzer_wait+0x6>
	return;
 8000f2e:	bf00      	nop
}
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000067 	.word	0x20000067

08000f38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b32      	ldr	r3, [pc, #200]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a31      	ldr	r2, [pc, #196]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a2b      	ldr	r2, [pc, #172]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a25      	ldr	r2, [pc, #148]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEPER_GPIO_Port, BEEPER_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9c:	481f      	ldr	r0, [pc, #124]	; (800101c <MX_GPIO_Init+0xe4>)
 8000f9e:	f001 ffff 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_GPIO_Init+0xe8>)
 8000fa8:	f001 fffa 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_GPIO_Init+0xec>)
 8000fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4816      	ldr	r0, [pc, #88]	; (800101c <MX_GPIO_Init+0xe4>)
 8000fc2:	f001 fe5b 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEPER_Pin;
 8000fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BEEPER_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <MX_GPIO_Init+0xe4>)
 8000fe0:	f001 fe4c 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <MX_GPIO_Init+0xe8>)
 8000ffc:	f001 fe3e 	bl	8002c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2028      	movs	r0, #40	; 0x28
 8001006:	f001 fdc4 	bl	8002b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100a:	2028      	movs	r0, #40	; 0x28
 800100c:	f001 fddd 	bl	8002bca <HAL_NVIC_EnableIRQ>

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	48000800 	.word	0x48000800
 8001020:	48000400 	.word	0x48000400
 8001024:	10110000 	.word	0x10110000

08001028 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_I2C1_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_I2C1_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000693;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_I2C1_Init+0x74>)
 8001034:	f240 6293 	movw	r2, #1683	; 0x693
 8001038:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_I2C1_Init+0x74>)
 8001042:	2201      	movs	r2, #1
 8001044:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2C1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_I2C1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_I2C1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_I2C1_Init+0x74>)
 8001066:	f001 ffcb 	bl	8003000 <HAL_I2C_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001070:	f000 fea3 	bl	8001dba <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <MX_I2C1_Init+0x74>)
 8001078:	f002 fc28 	bl	80038cc <HAL_I2CEx_ConfigAnalogFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001082:	f000 fe9a 	bl	8001dba <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_I2C1_Init+0x74>)
 800108a:	f002 fc6a 	bl	8003962 <HAL_I2CEx_ConfigDigitalFilter>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001094:	f000 fe91 	bl	8001dba <Error_Handler>
  }

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200000ac 	.word	0x200000ac
 80010a0:	40005400 	.word	0x40005400

080010a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_I2C_MspInit+0x7c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d127      	bne.n	8001116 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_I2C_MspInit+0x80>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <HAL_I2C_MspInit+0x80>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_I2C_MspInit+0x80>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010de:	23c0      	movs	r3, #192	; 0xc0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e2:	2312      	movs	r3, #18
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ee:	2304      	movs	r3, #4
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <HAL_I2C_MspInit+0x84>)
 80010fa:	f001 fdbf 	bl	8002c7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_I2C_MspInit+0x80>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_I2C_MspInit+0x80>)
 8001104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001108:	61d3      	str	r3, [r2, #28]
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_I2C_MspInit+0x80>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40005400 	.word	0x40005400
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	buzzer_next();
 8001134:	f7ff fe7e 	bl	8000e34 <buzzer_next>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GYRO_INT_Pin)
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001150:	d102      	bne.n	8001158 <HAL_GPIO_EXTI_Callback+0x18>
		mpu_ready = 1;
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_GPIO_EXTI_Callback+0x24>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200000aa 	.word	0x200000aa

08001168 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
    if (((USART3->ISR & USART_ISR_ORE) != 0U) && (((USART3->CR1 & USART_CR1_RXNEIE) != 0U)))
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <USART3_IRQHandler+0x94>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <USART3_IRQHandler+0x22>
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <USART3_IRQHandler+0x94>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0320 	and.w	r3, r3, #32
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <USART3_IRQHandler+0x22>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <USART3_IRQHandler+0x24>
 800118a:	2300      	movs	r3, #0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <USART3_IRQHandler+0x2e>
    	USART3->ICR = UART_CLEAR_OREF;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <USART3_IRQHandler+0x94>)
 8001192:	2208      	movs	r2, #8
 8001194:	621a      	str	r2, [r3, #32]

	if ( USART3->ISR & UART_IT_RXNE) {
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <USART3_IRQHandler+0x94>)
 8001198:	69da      	ldr	r2, [r3, #28]
 800119a:	f240 5325 	movw	r3, #1317	; 0x525
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01f      	beq.n	80011ee <USART3_IRQHandler+0x86>
		unsigned char tmp = (uint8_t)(USART3->RDR);
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <USART3_IRQHandler+0x94>)
 80011b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	71fb      	strb	r3, [r7, #7]
		rx_rbuff[rx_rbuff_ptr] = tmp;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <USART3_IRQHandler+0x98>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	4a11      	ldr	r2, [pc, #68]	; (8001204 <USART3_IRQHandler+0x9c>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	5453      	strb	r3, [r2, r1]

		if(++rx_rbuff_ptr == RX_RB_SIZE)
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <USART3_IRQHandler+0x98>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <USART3_IRQHandler+0x98>)
 80011d0:	4619      	mov	r1, r3
 80011d2:	7011      	strb	r1, [r2, #0]
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <USART3_IRQHandler+0x80>
			rx_rbuff_ptr = 0;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <USART3_IRQHandler+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]

		byte_rdy = 1;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <USART3_IRQHandler+0xa0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_IRQHandler(&huart3);
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <USART3_IRQHandler+0xa4>)
 80011f0:	f004 feea 	bl	8005fc8 <HAL_UART_IRQHandler>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40004800 	.word	0x40004800
 8001200:	20000088 	.word	0x20000088
 8001204:	20000068 	.word	0x20000068
 8001208:	200000a8 	.word	0x200000a8
 800120c:	200001b8 	.word	0x200001b8

08001210 <_Z10ibus_parsePVhh>:

void ibus_parse(volatile uint8_t* rbuff, uint8_t rbuff_pos){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	if((rbuff[rbuff_pos] != 0x20) || (rbuff[(rbuff_pos+1) & 0x1F] != 0x40))
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b20      	cmp	r3, #32
 8001228:	d109      	bne.n	800123e <_Z10ibus_parsePVhh+0x2e>
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	3301      	adds	r3, #1
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b40      	cmp	r3, #64	; 0x40
 800123c:	d001      	beq.n	8001242 <_Z10ibus_parsePVhh+0x32>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <_Z10ibus_parsePVhh+0x34>
 8001242:	2300      	movs	r3, #0
 8001244:	2b00      	cmp	r3, #0
 8001246:	f040 8192 	bne.w	800156e <_Z10ibus_parsePVhh+0x35e>
		return;

	uint8_t ptr;
	uint16_t chsum_calc = 0xFF9F;
 800124a:	f64f 739f 	movw	r3, #65439	; 0xff9f
 800124e:	81fb      	strh	r3, [r7, #14]

	for(uint8_t i=2; i<30; i++){
 8001250:	2302      	movs	r3, #2
 8001252:	737b      	strb	r3, [r7, #13]
 8001254:	7b7b      	ldrb	r3, [r7, #13]
 8001256:	2b1d      	cmp	r3, #29
 8001258:	d813      	bhi.n	8001282 <_Z10ibus_parsePVhh+0x72>
		ptr = (rbuff_pos+i) & 0x1F;
 800125a:	78fa      	ldrb	r2, [r7, #3]
 800125c:	7b7b      	ldrb	r3, [r7, #13]
 800125e:	4413      	add	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	733b      	strb	r3, [r7, #12]
		chsum_calc -= rbuff[ptr];
 8001268:	7b3b      	ldrb	r3, [r7, #12]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	89fa      	ldrh	r2, [r7, #14]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=2; i<30; i++){
 800127a:	7b7b      	ldrb	r3, [r7, #13]
 800127c:	3301      	adds	r3, #1
 800127e:	737b      	strb	r3, [r7, #13]
 8001280:	e7e8      	b.n	8001254 <_Z10ibus_parsePVhh+0x44>
	}

	uint16_t chsum_recv = (rbuff[(rbuff_pos+31) & 0x1F] << 8) + rbuff[(rbuff_pos+30) & 0x1F];
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	331f      	adds	r3, #31
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	b29b      	uxth	r3, r3
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b29a      	uxth	r2, r3
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	331e      	adds	r3, #30
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	440b      	add	r3, r1
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	817b      	strh	r3, [r7, #10]

	if(chsum_recv != chsum_calc)
 80012ae:	897a      	ldrh	r2, [r7, #10]
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	f040 815d 	bne.w	8001572 <_Z10ibus_parsePVhh+0x362>
		return;

	rc_values[0] = ((float)((rbuff[(rbuff_pos+3) & 0x1F] << 8) + rbuff[(rbuff_pos+2) & 0x1F]) - 1500.0) / 500.0;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	3303      	adds	r3, #3
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	3202      	adds	r2, #2
 80012ce:	f002 021f 	and.w	r2, r2, #31
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	440a      	add	r2, r1
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	4413      	add	r3, r2
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ee17 0a90 	vmov	r0, s15
 80012e8:	f7ff f8d2 	bl	8000490 <__aeabi_f2d>
 80012ec:	a3a4      	add	r3, pc, #656	; (adr r3, 8001580 <_Z10ibus_parsePVhh+0x370>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7fe ff6d 	bl	80001d0 <__aeabi_dsub>
 80012f6:	4603      	mov	r3, r0
 80012f8:	460c      	mov	r4, r1
 80012fa:	4618      	mov	r0, r3
 80012fc:	4621      	mov	r1, r4
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4ba1      	ldr	r3, [pc, #644]	; (8001588 <_Z10ibus_parsePVhh+0x378>)
 8001304:	f7ff fa46 	bl	8000794 <__aeabi_ddiv>
 8001308:	4603      	mov	r3, r0
 800130a:	460c      	mov	r4, r1
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fbb0 	bl	8000a74 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b9d      	ldr	r3, [pc, #628]	; (800158c <_Z10ibus_parsePVhh+0x37c>)
 8001318:	601a      	str	r2, [r3, #0]
	rc_values[1] = ((float)((rbuff[(rbuff_pos+5) & 0x1F] << 8) + rbuff[(rbuff_pos+4) & 0x1F]) - 1500.0) / 500.0;
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	3305      	adds	r3, #5
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	78fa      	ldrb	r2, [r7, #3]
 800132e:	3204      	adds	r2, #4
 8001330:	f002 021f 	and.w	r2, r2, #31
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	440a      	add	r2, r1
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	4413      	add	r3, r2
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	ee17 0a90 	vmov	r0, s15
 800134a:	f7ff f8a1 	bl	8000490 <__aeabi_f2d>
 800134e:	a38c      	add	r3, pc, #560	; (adr r3, 8001580 <_Z10ibus_parsePVhh+0x370>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7fe ff3c 	bl	80001d0 <__aeabi_dsub>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	4618      	mov	r0, r3
 800135e:	4621      	mov	r1, r4
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b88      	ldr	r3, [pc, #544]	; (8001588 <_Z10ibus_parsePVhh+0x378>)
 8001366:	f7ff fa15 	bl	8000794 <__aeabi_ddiv>
 800136a:	4603      	mov	r3, r0
 800136c:	460c      	mov	r4, r1
 800136e:	4618      	mov	r0, r3
 8001370:	4621      	mov	r1, r4
 8001372:	f7ff fb7f 	bl	8000a74 <__aeabi_d2f>
 8001376:	4602      	mov	r2, r0
 8001378:	4b84      	ldr	r3, [pc, #528]	; (800158c <_Z10ibus_parsePVhh+0x37c>)
 800137a:	605a      	str	r2, [r3, #4]
	rc_values[2] = ((float)((rbuff[(rbuff_pos+7) & 0x1F] << 8) + rbuff[(rbuff_pos+6) & 0x1F]) - 1500.0) / 500.0;
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	3307      	adds	r3, #7
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	3206      	adds	r2, #6
 8001392:	f002 021f 	and.w	r2, r2, #31
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	440a      	add	r2, r1
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	4413      	add	r3, r2
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	ee17 0a90 	vmov	r0, s15
 80013ac:	f7ff f870 	bl	8000490 <__aeabi_f2d>
 80013b0:	a373      	add	r3, pc, #460	; (adr r3, 8001580 <_Z10ibus_parsePVhh+0x370>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7fe ff0b 	bl	80001d0 <__aeabi_dsub>
 80013ba:	4603      	mov	r3, r0
 80013bc:	460c      	mov	r4, r1
 80013be:	4618      	mov	r0, r3
 80013c0:	4621      	mov	r1, r4
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b70      	ldr	r3, [pc, #448]	; (8001588 <_Z10ibus_parsePVhh+0x378>)
 80013c8:	f7ff f9e4 	bl	8000794 <__aeabi_ddiv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	4618      	mov	r0, r3
 80013d2:	4621      	mov	r1, r4
 80013d4:	f7ff fb4e 	bl	8000a74 <__aeabi_d2f>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <_Z10ibus_parsePVhh+0x37c>)
 80013dc:	609a      	str	r2, [r3, #8]
	rc_values[3] = ((float)((rbuff[(rbuff_pos+9) & 0x1F] << 8) + rbuff[(rbuff_pos+8) & 0x1F]) - 1500.0) / 500.0;
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	3309      	adds	r3, #9
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	78fa      	ldrb	r2, [r7, #3]
 80013f2:	3208      	adds	r2, #8
 80013f4:	f002 021f 	and.w	r2, r2, #31
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	440a      	add	r2, r1
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	4413      	add	r3, r2
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee17 0a90 	vmov	r0, s15
 800140e:	f7ff f83f 	bl	8000490 <__aeabi_f2d>
 8001412:	a35b      	add	r3, pc, #364	; (adr r3, 8001580 <_Z10ibus_parsePVhh+0x370>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7fe feda 	bl	80001d0 <__aeabi_dsub>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	4618      	mov	r0, r3
 8001422:	4621      	mov	r1, r4
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b57      	ldr	r3, [pc, #348]	; (8001588 <_Z10ibus_parsePVhh+0x378>)
 800142a:	f7ff f9b3 	bl	8000794 <__aeabi_ddiv>
 800142e:	4603      	mov	r3, r0
 8001430:	460c      	mov	r4, r1
 8001432:	4618      	mov	r0, r3
 8001434:	4621      	mov	r1, r4
 8001436:	f7ff fb1d 	bl	8000a74 <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <_Z10ibus_parsePVhh+0x37c>)
 800143e:	60da      	str	r2, [r3, #12]
	rc_values[4] = ((float)((rbuff[(rbuff_pos+11) & 0x1F] << 8) + rbuff[(rbuff_pos+10) & 0x1F]) - 1500.0) / 500.0;
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	330b      	adds	r3, #11
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	320a      	adds	r2, #10
 8001456:	f002 021f 	and.w	r2, r2, #31
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	440a      	add	r2, r1
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	4413      	add	r3, r2
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	ee17 0a90 	vmov	r0, s15
 8001470:	f7ff f80e 	bl	8000490 <__aeabi_f2d>
 8001474:	a342      	add	r3, pc, #264	; (adr r3, 8001580 <_Z10ibus_parsePVhh+0x370>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7fe fea9 	bl	80001d0 <__aeabi_dsub>
 800147e:	4603      	mov	r3, r0
 8001480:	460c      	mov	r4, r1
 8001482:	4618      	mov	r0, r3
 8001484:	4621      	mov	r1, r4
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <_Z10ibus_parsePVhh+0x378>)
 800148c:	f7ff f982 	bl	8000794 <__aeabi_ddiv>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f7ff faec 	bl	8000a74 <__aeabi_d2f>
 800149c:	4602      	mov	r2, r0
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <_Z10ibus_parsePVhh+0x37c>)
 80014a0:	611a      	str	r2, [r3, #16]
	rc_values[5] = ((float)((rbuff[(rbuff_pos+13) & 0x1F] << 8) + rbuff[(rbuff_pos+12) & 0x1F]) - 1500.0) / 500.0;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	330d      	adds	r3, #13
 80014a6:	f003 031f 	and.w	r3, r3, #31
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	320c      	adds	r2, #12
 80014b8:	f002 021f 	and.w	r2, r2, #31
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	440a      	add	r2, r1
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4413      	add	r3, r2
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	ee17 0a90 	vmov	r0, s15
 80014d2:	f7fe ffdd 	bl	8000490 <__aeabi_f2d>
 80014d6:	a32a      	add	r3, pc, #168	; (adr r3, 8001580 <_Z10ibus_parsePVhh+0x370>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fe78 	bl	80001d0 <__aeabi_dsub>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	4618      	mov	r0, r3
 80014e6:	4621      	mov	r1, r4
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <_Z10ibus_parsePVhh+0x378>)
 80014ee:	f7ff f951 	bl	8000794 <__aeabi_ddiv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	4618      	mov	r0, r3
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff fabb 	bl	8000a74 <__aeabi_d2f>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <_Z10ibus_parsePVhh+0x37c>)
 8001502:	615a      	str	r2, [r3, #20]
	rc_values[6] = ((float)((rbuff[(rbuff_pos+15) & 0x1F] << 8) + rbuff[(rbuff_pos+14) & 0x1F]) - 1500.0) / 500.0;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	330f      	adds	r3, #15
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	320e      	adds	r2, #14
 800151a:	f002 021f 	and.w	r2, r2, #31
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	440a      	add	r2, r1
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	4413      	add	r3, r2
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001530:	ee17 0a90 	vmov	r0, s15
 8001534:	f7fe ffac 	bl	8000490 <__aeabi_f2d>
 8001538:	a311      	add	r3, pc, #68	; (adr r3, 8001580 <_Z10ibus_parsePVhh+0x370>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7fe fe47 	bl	80001d0 <__aeabi_dsub>
 8001542:	4603      	mov	r3, r0
 8001544:	460c      	mov	r4, r1
 8001546:	4618      	mov	r0, r3
 8001548:	4621      	mov	r1, r4
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <_Z10ibus_parsePVhh+0x378>)
 8001550:	f7ff f920 	bl	8000794 <__aeabi_ddiv>
 8001554:	4603      	mov	r3, r0
 8001556:	460c      	mov	r4, r1
 8001558:	4618      	mov	r0, r3
 800155a:	4621      	mov	r1, r4
 800155c:	f7ff fa8a 	bl	8000a74 <__aeabi_d2f>
 8001560:	4602      	mov	r2, r0
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <_Z10ibus_parsePVhh+0x37c>)
 8001564:	619a      	str	r2, [r3, #24]

	rc_new_rdy = 1;
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <_Z10ibus_parsePVhh+0x380>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e002      	b.n	8001574 <_Z10ibus_parsePVhh+0x364>
		return;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <_Z10ibus_parsePVhh+0x364>
		return;
 8001572:	bf00      	nop
}
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	00000000 	.word	0x00000000
 8001584:	40977000 	.word	0x40977000
 8001588:	407f4000 	.word	0x407f4000
 800158c:	2000008c 	.word	0x2000008c
 8001590:	200000a9 	.word	0x200000a9

08001594 <_Z12startup_tonev>:

void startup_tone(){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	LED_ON;
 8001598:	2200      	movs	r2, #0
 800159a:	2108      	movs	r1, #8
 800159c:	4818      	ldr	r0, [pc, #96]	; (8001600 <_Z12startup_tonev+0x6c>)
 800159e:	f001 fcff 	bl	8002fa0 <HAL_GPIO_WritePin>
	buzzer_enqueue(BUZZER_ON, 10);
 80015a2:	210a      	movs	r1, #10
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fbf1 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_OFF, 50);
 80015aa:	2132      	movs	r1, #50	; 0x32
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fbed 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_ON, 10);
 80015b2:	210a      	movs	r1, #10
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff fbe9 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_OFF, 50);
 80015ba:	2132      	movs	r1, #50	; 0x32
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fbe5 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_ON, 10);
 80015c2:	210a      	movs	r1, #10
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fbe1 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_OFF, 50);
 80015ca:	2132      	movs	r1, #50	; 0x32
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fbdd 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_ON, 10);
 80015d2:	210a      	movs	r1, #10
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fbd9 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_OFF, 50);
 80015da:	2132      	movs	r1, #50	; 0x32
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fbd5 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_ON, 10);
 80015e2:	210a      	movs	r1, #10
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fbd1 	bl	8000d8c <buzzer_enqueue>
	buzzer_enqueue(BUZZER_OFF, 0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fbcd 	bl	8000d8c <buzzer_enqueue>
	LED_OFF;
 80015f2:	2201      	movs	r2, #1
 80015f4:	2108      	movs	r1, #8
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <_Z12startup_tonev+0x6c>)
 80015f8:	f001 fcd2 	bl	8002fa0 <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	48000400 	.word	0x48000400
 8001604:	00000000 	.word	0x00000000

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b0b0      	sub	sp, #192	; 0xc0
 800160c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160e:	f001 f95d 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001612:	f000 fb69 	bl	8001ce8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001616:	f7ff fc8f 	bl	8000f38 <MX_GPIO_Init>
  MX_I2C1_Init();
 800161a:	f7ff fd05 	bl	8001028 <MX_I2C1_Init>
  MX_TIM3_Init();
 800161e:	f000 fe5b 	bl	80022d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001622:	f000 febf 	bl	80023a4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001626:	f000 ff2f 	bl	8002488 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800162a:	f001 f843 	bl	80026b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800162e:	f001 f875 	bl	800271c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001632:	2100      	movs	r1, #0
 8001634:	48c2      	ldr	r0, [pc, #776]	; (8001940 <main+0x338>)
 8001636:	f003 fd51 	bl	80050dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800163a:	2104      	movs	r1, #4
 800163c:	48c0      	ldr	r0, [pc, #768]	; (8001940 <main+0x338>)
 800163e:	f003 fd4d 	bl	80050dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001642:	2100      	movs	r1, #0
 8001644:	48bf      	ldr	r0, [pc, #764]	; (8001944 <main+0x33c>)
 8001646:	f003 fd49 	bl	80050dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800164a:	2104      	movs	r1, #4
 800164c:	48bd      	ldr	r0, [pc, #756]	; (8001944 <main+0x33c>)
 800164e:	f003 fd45 	bl	80050dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001652:	2108      	movs	r1, #8
 8001654:	48bb      	ldr	r0, [pc, #748]	; (8001944 <main+0x33c>)
 8001656:	f003 fd41 	bl	80050dc <HAL_TIM_PWM_Start>

  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800165a:	4bbb      	ldr	r3, [pc, #748]	; (8001948 <main+0x340>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	4bb9      	ldr	r3, [pc, #740]	; (8001948 <main+0x340>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0208 	orr.w	r2, r2, #8
 8001668:	619a      	str	r2, [r3, #24]
 800166a:	4bb7      	ldr	r3, [pc, #732]	; (8001948 <main+0x340>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	4bb5      	ldr	r3, [pc, #724]	; (8001948 <main+0x340>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0210 	orr.w	r2, r2, #16
 8001678:	619a      	str	r2, [r3, #24]



  startup_tone();
 800167a:	f7ff ff8b 	bl	8001594 <_Z12startup_tonev>

  Servo ser_ail_r(900, 2100, 1500, &(TIM3->CCR1));
 800167e:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001682:	4bb2      	ldr	r3, [pc, #712]	; (800194c <main+0x344>)
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800168a:	f640 0234 	movw	r2, #2100	; 0x834
 800168e:	f44f 7161 	mov.w	r1, #900	; 0x384
 8001692:	f7ff faea 	bl	8000c6a <_ZN5ServoC1EtttPVm>
  Servo ser_ail_l(900, 2100, 1500, &(TIM4->CCR3));
 8001696:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800169a:	4bad      	ldr	r3, [pc, #692]	; (8001950 <main+0x348>)
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80016a2:	f640 0234 	movw	r2, #2100	; 0x834
 80016a6:	f44f 7161 	mov.w	r1, #900	; 0x384
 80016aa:	f7ff fade 	bl	8000c6a <_ZN5ServoC1EtttPVm>
  Servo ser_ele(1000, 2000, 1511, &(TIM3->CCR2));
 80016ae:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80016b2:	4ba8      	ldr	r3, [pc, #672]	; (8001954 <main+0x34c>)
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	f240 53e7 	movw	r3, #1511	; 0x5e7
 80016ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016c2:	f7ff fad2 	bl	8000c6a <_ZN5ServoC1EtttPVm>
  Servo ser_rud(988, 1874, 1477, &(TIM4->CCR2));
 80016c6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80016ca:	4ba3      	ldr	r3, [pc, #652]	; (8001958 <main+0x350>)
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	f240 53c5 	movw	r3, #1477	; 0x5c5
 80016d2:	f240 7252 	movw	r2, #1874	; 0x752
 80016d6:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 80016da:	f7ff fac6 	bl	8000c6a <_ZN5ServoC1EtttPVm>

  PID pid_roll;
 80016de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fa16 	bl	8000b14 <_ZN3PIDC1Ev>
  PID pid_pitch;
 80016e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fa11 	bl	8000b14 <_ZN3PIDC1Ev>
  PID pid_yaw;
 80016f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fa0c 	bl	8000b14 <_ZN3PIDC1Ev>

  HAL_Delay(1000);
 80016fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001700:	f001 f94a 	bl	8002998 <HAL_Delay>

  Mpu sensor(&hi2c1);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4994      	ldr	r1, [pc, #592]	; (800195c <main+0x354>)
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fb5c 	bl	8001dc8 <_ZN3MpuC1EP19__I2C_HandleTypeDef>
  sensor.mpu_set_power_cfg(0, POWER_DISABLE_TEMP, WAKEUP_FREQ_1_25HZ, CLKSRC_GYRO_X);
 8001710:	f107 000c 	add.w	r0, r7, #12
 8001714:	2301      	movs	r3, #1
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	2208      	movs	r2, #8
 800171c:	2100      	movs	r1, #0
 800171e:	f000 fc98 	bl	8002052 <_ZN3Mpu17mpu_set_power_cfgEhh15MPU_wakeup_freq14MPU_clk_source>
  sensor.mpu_set_lowpass(LPF_FREQ_98);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2102      	movs	r1, #2
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fcd2 	bl	80020d2 <_ZN3Mpu15mpu_set_lowpassE12MPU_lpf_freq>
  sensor.mpu_set_gyro_range(GYRO_RANGE_2000_DEGS);
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2103      	movs	r1, #3
 8001734:	4618      	mov	r0, r3
 8001736:	f000 fb7b 	bl	8001e30 <_ZN3Mpu18mpu_set_gyro_rangeE14MPU_gyro_range>
  sensor.mpu_set_accel_range(ACCEL_RANGE_8G);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2102      	movs	r1, #2
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fb93 	bl	8001e6c <_ZN3Mpu19mpu_set_accel_rangeE15MPU_accel_range>
  sensor.mpu_set_samplerate_div(4);
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	2104      	movs	r1, #4
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fcb0 	bl	80020b2 <_ZN3Mpu22mpu_set_samplerate_divEh>
  sensor.mpu_set_interrupt(MPU_INT_HOLD | MPU_INT_CLEAR_READ_ANY, MPU_INT_SRC_DATA_READY);
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2201      	movs	r2, #1
 8001758:	2130      	movs	r1, #48	; 0x30
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fba4 	bl	8001ea8 <_ZN3Mpu17mpu_set_interruptEhh>

  HAL_Delay(3200);
 8001760:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8001764:	f001 f918 	bl	8002998 <HAL_Delay>
  buzzer_wait();
 8001768:	f7ff fbd6 	bl	8000f18 <buzzer_wait>

  LED_ON;
 800176c:	2200      	movs	r2, #0
 800176e:	2108      	movs	r1, #8
 8001770:	487b      	ldr	r0, [pc, #492]	; (8001960 <main+0x358>)
 8001772:	f001 fc15 	bl	8002fa0 <HAL_GPIO_WritePin>
  buzzer_enqueue(BUZZER_ON, 50);
 8001776:	2132      	movs	r1, #50	; 0x32
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fb07 	bl	8000d8c <buzzer_enqueue>
  buzzer_enqueue(BUZZER_OFF, 0);
 800177e:	2100      	movs	r1, #0
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fb03 	bl	8000d8c <buzzer_enqueue>

  sensor.mpu_gyro_calibrate(128, GYRO_INT_GPIO_Port, GYRO_INT_Pin);
 8001786:	f107 000c 	add.w	r0, r7, #12
 800178a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178e:	4a75      	ldr	r2, [pc, #468]	; (8001964 <main+0x35c>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	f000 fcb1 	bl	80020f8 <_ZN3Mpu18mpu_gyro_calibrateEhP12GPIO_TypeDeft>

  buzzer_enqueue(BUZZER_ON, 300);
 8001796:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff faf6 	bl	8000d8c <buzzer_enqueue>
  buzzer_enqueue(BUZZER_OFF, 20);
 80017a0:	2114      	movs	r1, #20
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff faf2 	bl	8000d8c <buzzer_enqueue>
  buzzer_enqueue(BUZZER_ON, 100);
 80017a8:	2164      	movs	r1, #100	; 0x64
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff faee 	bl	8000d8c <buzzer_enqueue>
  buzzer_enqueue(BUZZER_OFF, 0);
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff faea 	bl	8000d8c <buzzer_enqueue>
  LED_OFF;
 80017b8:	2201      	movs	r2, #1
 80017ba:	2108      	movs	r1, #8
 80017bc:	4868      	ldr	r0, [pc, #416]	; (8001960 <main+0x358>)
 80017be:	f001 fbef 	bl	8002fa0 <HAL_GPIO_WritePin>

  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 80017c2:	4b61      	ldr	r3, [pc, #388]	; (8001948 <main+0x340>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <main+0x340>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0208 	orr.w	r2, r2, #8
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <main+0x340>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <main+0x340>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0210 	orr.w	r2, r2, #16
 80017e0:	619a      	str	r2, [r3, #24]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <main+0x340>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b57      	ldr	r3, [pc, #348]	; (8001948 <main+0x340>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0220 	orr.w	r2, r2, #32
 80017f0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	if(byte_rdy){
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <main+0x360>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d017      	beq.n	8001836 <main+0x22e>
	byte_rdy = 0;
 8001806:	4b58      	ldr	r3, [pc, #352]	; (8001968 <main+0x360>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
	if(rx_rbuff[rx_rbuff_ptr] == 0x20)
 800180c:	4b57      	ldr	r3, [pc, #348]	; (800196c <main+0x364>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	4b56      	ldr	r3, [pc, #344]	; (8001970 <main+0x368>)
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b20      	cmp	r3, #32
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <main+0x22e>
		ibus_parse(rx_rbuff, rx_rbuff_ptr);
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <main+0x364>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	484f      	ldr	r0, [pc, #316]	; (8001970 <main+0x368>)
 8001832:	f7ff fced 	bl	8001210 <_Z10ibus_parsePVhh>
	}

	if(rc_new_rdy){
 8001836:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <main+0x36c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8170 	beq.w	8001b2c <main+0x524>
		rc_new_rdy = 0;
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <main+0x36c>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
		if(rc_values[5] < -0.8){
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <main+0x370>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe1a 	bl	8000490 <__aeabi_f2d>
 800185c:	a334      	add	r3, pc, #208	; (adr r3, 8001930 <main+0x328>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7ff f8df 	bl	8000a24 <__aeabi_dcmplt>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d010      	beq.n	800188e <main+0x286>
			if(flightmode != FM_MAN){
 800186c:	4b43      	ldr	r3, [pc, #268]	; (800197c <main+0x374>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80d9 	beq.w	8001a28 <main+0x420>
				flightmode = FM_MAN;
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <main+0x374>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
				buzzer_enqueue(BUZZER_ON, 150);
 800187c:	2196      	movs	r1, #150	; 0x96
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fa84 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_OFF, 0);
 8001884:	2100      	movs	r1, #0
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fa80 	bl	8000d8c <buzzer_enqueue>
 800188c:	e0cc      	b.n	8001a28 <main+0x420>
			}
		} else if(rc_values[5] < 0.8){
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <main+0x370>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fdfc 	bl	8000490 <__aeabi_f2d>
 8001898:	a327      	add	r3, pc, #156	; (adr r3, 8001938 <main+0x330>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7ff f8c1 	bl	8000a24 <__aeabi_dcmplt>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d079      	beq.n	800199c <main+0x394>
			if(flightmode != FM_STAB1){
 80018a8:	4b34      	ldr	r3, [pc, #208]	; (800197c <main+0x374>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	f000 80bb 	beq.w	8001a28 <main+0x420>
				flightmode = FM_STAB1;
 80018b2:	4b32      	ldr	r3, [pc, #200]	; (800197c <main+0x374>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
				pid_roll.setPidAll(PID_FM1_ROLL_KP, PID_FM1_ROLL_KI, PID_FM1_ROLL_KD ,PID_FM1_ROLL_WUM);
 80018b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018bc:	eddf 1a30 	vldr	s3, [pc, #192]	; 8001980 <main+0x378>
 80018c0:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8001984 <main+0x37c>
 80018c4:	eddf 0a30 	vldr	s1, [pc, #192]	; 8001988 <main+0x380>
 80018c8:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001984 <main+0x37c>
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff f9ae 	bl	8000c2e <_ZN3PID9setPidAllEffff>
				pid_pitch.setPidAll(PID_FM1_PITCH_KP, PID_FM1_PITCH_KI, PID_FM1_PITCH_KD, PID_FM1_PITCH_WUM);
 80018d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018d6:	eddf 1a2d 	vldr	s3, [pc, #180]	; 800198c <main+0x384>
 80018da:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8001990 <main+0x388>
 80018de:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8001990 <main+0x388>
 80018e2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001994 <main+0x38c>
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f9a1 	bl	8000c2e <_ZN3PID9setPidAllEffff>
				pid_yaw.setPidAll(PID_FM1_YAW_KP, PID_FM1_YAW_KI, PID_FM1_YAW_KD, PID_FM1_YAW_WUM);
 80018ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f0:	eddf 1a26 	vldr	s3, [pc, #152]	; 800198c <main+0x384>
 80018f4:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8001984 <main+0x37c>
 80018f8:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001990 <main+0x388>
 80018fc:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001998 <main+0x390>
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f994 	bl	8000c2e <_ZN3PID9setPidAllEffff>
				buzzer_enqueue(BUZZER_ON, 150);
 8001906:	2196      	movs	r1, #150	; 0x96
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fa3f 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_OFF, 50);
 800190e:	2132      	movs	r1, #50	; 0x32
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fa3b 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_ON, 150);
 8001916:	2196      	movs	r1, #150	; 0x96
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fa37 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_OFF, 300);
 800191e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fa32 	bl	8000d8c <buzzer_enqueue>
 8001928:	e07e      	b.n	8001a28 <main+0x420>
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	9999999a 	.word	0x9999999a
 8001934:	bfe99999 	.word	0xbfe99999
 8001938:	9999999a 	.word	0x9999999a
 800193c:	3fe99999 	.word	0x3fe99999
 8001940:	20000138 	.word	0x20000138
 8001944:	200000f8 	.word	0x200000f8
 8001948:	200001b8 	.word	0x200001b8
 800194c:	40000434 	.word	0x40000434
 8001950:	4000083c 	.word	0x4000083c
 8001954:	40000438 	.word	0x40000438
 8001958:	40000838 	.word	0x40000838
 800195c:	200000ac 	.word	0x200000ac
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	200000a8 	.word	0x200000a8
 800196c:	20000088 	.word	0x20000088
 8001970:	20000068 	.word	0x20000068
 8001974:	200000a9 	.word	0x200000a9
 8001978:	2000008c 	.word	0x2000008c
 800197c:	200000ab 	.word	0x200000ab
 8001980:	42c80000 	.word	0x42c80000
 8001984:	3dcccccd 	.word	0x3dcccccd
 8001988:	3c23d70a 	.word	0x3c23d70a
 800198c:	42480000 	.word	0x42480000
 8001990:	3ca3d70a 	.word	0x3ca3d70a
 8001994:	3e4ccccd 	.word	0x3e4ccccd
 8001998:	3e99999a 	.word	0x3e99999a
			}
		} else
			if(flightmode != FM_STAB2){
 800199c:	4bc8      	ldr	r3, [pc, #800]	; (8001cc0 <main+0x6b8>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d041      	beq.n	8001a28 <main+0x420>
				flightmode = FM_STAB2;
 80019a4:	4bc6      	ldr	r3, [pc, #792]	; (8001cc0 <main+0x6b8>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
				pid_roll.setPidAll(PID_FM2_ROLL_KP, PID_FM2_ROLL_KI, PID_FM2_ROLL_KD, PID_FM2_ROLL_WUM);
 80019aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019ae:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 80019b2:	ed9f 1ac4 	vldr	s2, [pc, #784]	; 8001cc4 <main+0x6bc>
 80019b6:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8001cc8 <main+0x6c0>
 80019ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f935 	bl	8000c2e <_ZN3PID9setPidAllEffff>
				pid_pitch.setPidAll(PID_FM2_PITCH_KP, PID_FM2_PITCH_KI, PID_FM2_PITCH_KD, PID_FM2_PITCH_WUM);
 80019c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019c8:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 80019cc:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 80019d0:	eddf 0abe 	vldr	s1, [pc, #760]	; 8001ccc <main+0x6c4>
 80019d4:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff f928 	bl	8000c2e <_ZN3PID9setPidAllEffff>
				pid_yaw.setPidAll(PID_FM2_YAW_KP, PID_FM2_YAW_KI, PID_FM2_YAW_KD, PID_FM2_YAW_WUM);
 80019de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019e2:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 80019e6:	ed9f 1aba 	vldr	s2, [pc, #744]	; 8001cd0 <main+0x6c8>
 80019ea:	eddf 0aba 	vldr	s1, [pc, #744]	; 8001cd4 <main+0x6cc>
 80019ee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f91b 	bl	8000c2e <_ZN3PID9setPidAllEffff>
				buzzer_enqueue(BUZZER_ON, 150);
 80019f8:	2196      	movs	r1, #150	; 0x96
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff f9c6 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_OFF, 50);
 8001a00:	2132      	movs	r1, #50	; 0x32
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff f9c2 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_ON, 150);
 8001a08:	2196      	movs	r1, #150	; 0x96
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff f9be 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_OFF, 50);
 8001a10:	2132      	movs	r1, #50	; 0x32
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff f9ba 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_ON, 150);
 8001a18:	2196      	movs	r1, #150	; 0x96
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff f9b6 	bl	8000d8c <buzzer_enqueue>
				buzzer_enqueue(BUZZER_OFF, 0);
 8001a20:	2100      	movs	r1, #0
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff f9b2 	bl	8000d8c <buzzer_enqueue>
			}


		if(flightmode == FM_MAN){
 8001a28:	4ba5      	ldr	r3, [pc, #660]	; (8001cc0 <main+0x6b8>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d17d      	bne.n	8001b2c <main+0x524>
			if(rc_values[4] > 0.5)	//flaperon
 8001a30:	4ba9      	ldr	r3, [pc, #676]	; (8001cd8 <main+0x6d0>)
 8001a32:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	dd1d      	ble.n	8001a80 <main+0x478>
				ser_ail_l.set_norm(-rc_values[0] - 0.7);
 8001a44:	4ba4      	ldr	r3, [pc, #656]	; (8001cd8 <main+0x6d0>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eef1 7a67 	vneg.f32	s15, s15
 8001a4e:	ee17 3a90 	vmov	r3, s15
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd1c 	bl	8000490 <__aeabi_f2d>
 8001a58:	a397      	add	r3, pc, #604	; (adr r3, 8001cb8 <main+0x6b0>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fbb7 	bl	80001d0 <__aeabi_dsub>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	4618      	mov	r0, r3
 8001a68:	4621      	mov	r1, r4
 8001a6a:	f7ff f803 	bl	8000a74 <__aeabi_d2f>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a74:	ee00 2a10 	vmov	s0, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f923 	bl	8000cc4 <_ZN5Servo8set_normEf>
 8001a7e:	e00b      	b.n	8001a98 <main+0x490>
			else
				ser_ail_l.set_norm(-rc_values[0]);
 8001a80:	4b95      	ldr	r3, [pc, #596]	; (8001cd8 <main+0x6d0>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	eef1 7a67 	vneg.f32	s15, s15
 8001a8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f916 	bl	8000cc4 <_ZN5Servo8set_normEf>
			ser_ele.set_norm(rc_values[1]);
 8001a98:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <main+0x6d0>)
 8001a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a9e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f90c 	bl	8000cc4 <_ZN5Servo8set_normEf>
			ser_rud.set_norm(-rc_values[3]);
 8001aac:	4b8a      	ldr	r3, [pc, #552]	; (8001cd8 <main+0x6d0>)
 8001aae:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ab2:	eef1 7a67 	vneg.f32	s15, s15
 8001ab6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001aba:	eeb0 0a67 	vmov.f32	s0, s15
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f900 	bl	8000cc4 <_ZN5Servo8set_normEf>
			if(rc_values[4] > 0.5)	//flaperon
 8001ac4:	4b84      	ldr	r3, [pc, #528]	; (8001cd8 <main+0x6d0>)
 8001ac6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	dd1d      	ble.n	8001b14 <main+0x50c>
				ser_ail_r.set_norm(-rc_values[0] + 0.7);
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <main+0x6d0>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	eef1 7a67 	vneg.f32	s15, s15
 8001ae2:	ee17 3a90 	vmov	r3, s15
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fcd2 	bl	8000490 <__aeabi_f2d>
 8001aec:	a372      	add	r3, pc, #456	; (adr r3, 8001cb8 <main+0x6b0>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fb6f 	bl	80001d4 <__adddf3>
 8001af6:	4603      	mov	r3, r0
 8001af8:	460c      	mov	r4, r1
 8001afa:	4618      	mov	r0, r3
 8001afc:	4621      	mov	r1, r4
 8001afe:	f7fe ffb9 	bl	8000a74 <__aeabi_d2f>
 8001b02:	4602      	mov	r2, r0
 8001b04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b08:	ee00 2a10 	vmov	s0, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f8d9 	bl	8000cc4 <_ZN5Servo8set_normEf>
 8001b12:	e00b      	b.n	8001b2c <main+0x524>
			else
				ser_ail_r.set_norm(-rc_values[0]);
 8001b14:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <main+0x6d0>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eef1 7a67 	vneg.f32	s15, s15
 8001b1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f8cc 	bl	8000cc4 <_ZN5Servo8set_normEf>
		}
	}

	if(mpu_ready){
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	; (8001cdc <main+0x6d4>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f43f ae58 	beq.w	80017f2 <main+0x1ea>
		mpu_ready = 0;
 8001b42:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <main+0x6d4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]

		float gyro[3];
		sensor.mpu_read_gyro_norm(gyro);
 8001b48:	463a      	mov	r2, r7
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fa43 	bl	8001fdc <_ZN3Mpu18mpu_read_gyro_normEPf>


		if(flightmode != FM_MAN){
 8001b56:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <main+0x6b8>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f43f ae49 	beq.w	80017f2 <main+0x1ea>
			ser_ail_l.set_norm(-pid_roll.update(rc_values[0] + (gyro[1]/100.0)));
 8001b60:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <main+0x6d0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc93 	bl	8000490 <__aeabi_f2d>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	460d      	mov	r5, r1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc8d 	bl	8000490 <__aeabi_f2d>
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <main+0x6d8>)
 8001b7c:	f7fe fe0a 	bl	8000794 <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fb24 	bl	80001d4 <__adddf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	4618      	mov	r0, r3
 8001b92:	4621      	mov	r1, r4
 8001b94:	f7fe ff6e 	bl	8000a74 <__aeabi_d2f>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b9e:	ee00 2a10 	vmov	s0, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe ffd9 	bl	8000b5a <_ZN3PID6updateEf>
 8001ba8:	eef0 7a40 	vmov.f32	s15, s0
 8001bac:	eef1 7a67 	vneg.f32	s15, s15
 8001bb0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f883 	bl	8000cc4 <_ZN5Servo8set_normEf>
			ser_ele.set_norm(pid_pitch.update(rc_values[1] - (gyro[0]/100)));
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <main+0x6d0>)
 8001bc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc4:	edd7 6a00 	vldr	s13, [r7]
 8001bc8:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8001ce4 <main+0x6dc>
 8001bcc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe ffbc 	bl	8000b5a <_ZN3PID6updateEf>
 8001be2:	eef0 7a40 	vmov.f32	s15, s0
 8001be6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bea:	eeb0 0a67 	vmov.f32	s0, s15
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f868 	bl	8000cc4 <_ZN5Servo8set_normEf>
			ser_rud.set_norm(pid_yaw.update(-rc_values[3] - (gyro[2]/100.0)));
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <main+0x6d0>)
 8001bf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bfa:	eef1 7a67 	vneg.f32	s15, s15
 8001bfe:	ee17 3a90 	vmov	r3, s15
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc44 	bl	8000490 <__aeabi_f2d>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc3e 	bl	8000490 <__aeabi_f2d>
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <main+0x6d8>)
 8001c1a:	f7fe fdbb 	bl	8000794 <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4620      	mov	r0, r4
 8001c24:	4629      	mov	r1, r5
 8001c26:	f7fe fad3 	bl	80001d0 <__aeabi_dsub>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4621      	mov	r1, r4
 8001c32:	f7fe ff1f 	bl	8000a74 <__aeabi_d2f>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c3c:	ee00 2a10 	vmov	s0, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe ff8a 	bl	8000b5a <_ZN3PID6updateEf>
 8001c46:	eef0 7a40 	vmov.f32	s15, s0
 8001c4a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f836 	bl	8000cc4 <_ZN5Servo8set_normEf>
			ser_ail_r.set_norm(-pid_roll.update(rc_values[0] + (gyro[1]/100.0)));
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <main+0x6d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc17 	bl	8000490 <__aeabi_f2d>
 8001c62:	4604      	mov	r4, r0
 8001c64:	460d      	mov	r5, r1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc11 	bl	8000490 <__aeabi_f2d>
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <main+0x6d8>)
 8001c74:	f7fe fd8e 	bl	8000794 <__aeabi_ddiv>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe faa8 	bl	80001d4 <__adddf3>
 8001c84:	4603      	mov	r3, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	f7fe fef2 	bl	8000a74 <__aeabi_d2f>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c96:	ee00 2a10 	vmov	s0, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe ff5d 	bl	8000b5a <_ZN3PID6updateEf>
 8001ca0:	eef0 7a40 	vmov.f32	s15, s0
 8001ca4:	eef1 7a67 	vneg.f32	s15, s15
 8001ca8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cac:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f807 	bl	8000cc4 <_ZN5Servo8set_normEf>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001cb6:	e59c      	b.n	80017f2 <main+0x1ea>
 8001cb8:	66666666 	.word	0x66666666
 8001cbc:	3fe66666 	.word	0x3fe66666
 8001cc0:	200000ab 	.word	0x200000ab
 8001cc4:	3f666666 	.word	0x3f666666
 8001cc8:	3da3d70a 	.word	0x3da3d70a
 8001ccc:	3d4ccccd 	.word	0x3d4ccccd
 8001cd0:	3f19999a 	.word	0x3f19999a
 8001cd4:	3dcccccd 	.word	0x3dcccccd
 8001cd8:	2000008c 	.word	0x2000008c
 8001cdc:	200000aa 	.word	0x200000aa
 8001ce0:	40590000 	.word	0x40590000
 8001ce4:	42c80000 	.word	0x42c80000

08001ce8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b09e      	sub	sp, #120	; 0x78
 8001cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cf2:	2228      	movs	r2, #40	; 0x28
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 feba 	bl	8006a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	223c      	movs	r2, #60	; 0x3c
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 feac 	bl	8006a70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d20:	2310      	movs	r3, #16
 8001d22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d24:	2302      	movs	r3, #2
 8001d26:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001d2c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001d30:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fe60 	bl	80039fc <HAL_RCC_OscConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8001d4c:	f000 f835 	bl	8001dba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d50:	230f      	movs	r3, #15
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d54:	2302      	movs	r3, #2
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fd4d 	bl	800480c <HAL_RCC_ClockConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001d82:	f000 f81a 	bl	8001dba <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001d86:	2325      	movs	r3, #37	; 0x25
 8001d88:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f002 ff6d 	bl	8004c78 <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8001dae:	f000 f804 	bl	8001dba <Error_Handler>
  }
}
 8001db2:	bf00      	nop
 8001db4:	3778      	adds	r7, #120	; 0x78
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_ZN3MpuC1EP19__I2C_HandleTypeDef>:

#include "mpu.h"
#include <math.h>


Mpu::Mpu(I2C_HandleTypeDef *i2c_handle){
 8001dc8:	b490      	push	{r4, r7}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	819a      	strh	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	81da      	strh	r2, [r3, #14]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	821a      	strh	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <_ZN3MpuC1EP19__I2C_HandleTypeDef+0x60>)
 8001de8:	f103 0414 	add.w	r4, r3, #20
 8001dec:	4613      	mov	r3, r2
 8001dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <_ZN3MpuC1EP19__I2C_HandleTypeDef+0x64>)
 8001df8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mpu_i2c_handle = i2c_handle;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	601a      	str	r2, [r3, #0]
	mpu_gyro_scale = MPU_GYRO_SCALE[0];
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	605a      	str	r2, [r3, #4]
	mpu_accel_scale = MPU_ACCEL_SCALE[0];
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
}
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc90      	pop	{r4, r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	08006a98 	.word	0x08006a98
 8001e2c:	08006aa8 	.word	0x08006aa8

08001e30 <_ZN3Mpu18mpu_set_gyro_rangeE14MPU_gyro_range>:

void Mpu::mpu_set_gyro_range(MPU_gyro_range fsr) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
	mpu_write_byte(MPU_REG_GYRO_CONFIG, (fsr<<3) & 0x18);
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f003 0318 	and.w	r3, r3, #24
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	211b      	movs	r1, #27
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f9ac 	bl	80021aa <_ZN3Mpu14mpu_write_byteEhh>
	mpu_gyro_scale = MPU_GYRO_SCALE[fsr];
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	605a      	str	r2, [r3, #4]
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZN3Mpu19mpu_set_accel_rangeE15MPU_accel_range>:

void Mpu::mpu_set_accel_range(MPU_accel_range fsr) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
	mpu_write_byte(MPU_REG_ACCEL_CONFIG, (fsr<<3) & 0x18);
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 0318 	and.w	r3, r3, #24
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	211c      	movs	r1, #28
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f98e 	bl	80021aa <_ZN3Mpu14mpu_write_byteEhh>
	mpu_accel_scale = MPU_ACCEL_SCALE[fsr];
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	3308      	adds	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_ZN3Mpu17mpu_set_interruptEhh>:

void Mpu::mpu_set_fifo_enable(uint8_t fifo_en) {
	mpu_write_byte(MPU_REG_FIFO_EN, fifo_en);
}

void Mpu::mpu_set_interrupt(uint8_t pincfg, uint8_t int_en_src) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	70bb      	strb	r3, [r7, #2]
	mpu_write_byte(MPU_REG_INT_PIN_CFG, pincfg);
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2137      	movs	r1, #55	; 0x37
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f973 	bl	80021aa <_ZN3Mpu14mpu_write_byteEhh>
	mpu_write_byte(MPU_REG_INT_ENABLE, int_en_src);
 8001ec4:	78bb      	ldrb	r3, [r7, #2]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2138      	movs	r1, #56	; 0x38
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f96d 	bl	80021aa <_ZN3Mpu14mpu_write_byteEhh>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_ZN3Mpu17mpu_read_gyro_rawEPs>:
	acc[0] = (recv[0] << 8) | recv[1];
	acc[1] = (recv[2] << 8) | recv[3];
	acc[2] = (recv[4] << 8) | recv[5];
}

void Mpu::mpu_read_gyro_raw(int16_t *gyro) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	uint8_t recv[6];

	HAL_I2C_Mem_Read(mpu_i2c_handle, MPU_I2C_ADDR, MPU_REG_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, recv, 6, HAL_MAX_DELAY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	2306      	movs	r3, #6
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	2243      	movs	r2, #67	; 0x43
 8001efa:	21d0      	movs	r1, #208	; 0xd0
 8001efc:	f001 fa04 	bl	8003308 <HAL_I2C_Mem_Read>
	gyro[0] = (recv[0] << 8) | recv[1];
 8001f00:	7a3b      	ldrb	r3, [r7, #8]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	7a7b      	ldrb	r3, [r7, #9]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	801a      	strh	r2, [r3, #0]
	gyro[1] = (recv[2] << 8) | recv[3];
 8001f12:	7abb      	ldrb	r3, [r7, #10]
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b219      	sxth	r1, r3
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	430a      	orrs	r2, r1
 8001f22:	b212      	sxth	r2, r2
 8001f24:	801a      	strh	r2, [r3, #0]
	gyro[2] = (recv[4] << 8) | recv[5];
 8001f26:	7b3b      	ldrb	r3, [r7, #12]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b219      	sxth	r1, r3
 8001f2c:	7b7b      	ldrb	r3, [r7, #13]
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	3304      	adds	r3, #4
 8001f34:	430a      	orrs	r2, r1
 8001f36:	b212      	sxth	r2, r2
 8001f38:	801a      	strh	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_ZN3Mpu21mpu_read_gyro_raw_calEPs>:

void Mpu::mpu_read_gyro_raw_cal(int16_t *gyro) {
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b088      	sub	sp, #32
 8001f46:	af04      	add	r7, sp, #16
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
	uint8_t recv[6];

	HAL_I2C_Mem_Read(mpu_i2c_handle, MPU_I2C_ADDR, MPU_REG_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, recv, 6, HAL_MAX_DELAY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	2306      	movs	r3, #6
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2301      	movs	r3, #1
 8001f62:	2243      	movs	r2, #67	; 0x43
 8001f64:	21d0      	movs	r1, #208	; 0xd0
 8001f66:	f001 f9cf 	bl	8003308 <HAL_I2C_Mem_Read>
	gyro[0] = ((recv[0] << 8) | recv[1]) - mpu_gyro_offset[0];
 8001f6a:	7a3b      	ldrb	r3, [r7, #8]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	7a7b      	ldrb	r3, [r7, #9]
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((recv[2] << 8) | recv[3]) - mpu_gyro_offset[1];
 8001f8c:	7abb      	ldrb	r3, [r7, #10]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	3302      	adds	r3, #2
 8001fac:	b212      	sxth	r2, r2
 8001fae:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((recv[4] << 8) | recv[5]) - mpu_gyro_offset[2];
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	7b7b      	ldrb	r3, [r7, #13]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	b212      	sxth	r2, r2
 8001fd2:	801a      	strh	r2, [r3, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZN3Mpu18mpu_read_gyro_normEPf>:

	HAL_I2C_Mem_Read(mpu_i2c_handle, MPU_I2C_ADDR, MPU_REG_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, recv, 2, HAL_MAX_DELAY);
	return((recv[0] << 8) | recv[1]);
}

void Mpu::mpu_read_gyro_norm(float *gyro) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	int16_t gyro_raw[3];

	mpu_read_gyro_raw_cal(gyro_raw);
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ffa8 	bl	8001f42 <_ZN3Mpu21mpu_read_gyro_raw_calEPs>
	gyro[0] = gyro_raw[0] / mpu_gyro_scale;
 8001ff2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	ed93 7a01 	vldr	s14, [r3, #4]
 8002004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	edc3 7a00 	vstr	s15, [r3]
	gyro[1] = gyro_raw[1] / mpu_gyro_scale;
 800200e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	3304      	adds	r3, #4
 8002024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002028:	edc3 7a00 	vstr	s15, [r3]
	gyro[2] = gyro_raw[2] / mpu_gyro_scale;
 800202c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	ed93 7a01 	vldr	s14, [r3, #4]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3308      	adds	r3, #8
 8002042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002046:	edc3 7a00 	vstr	s15, [r3]
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_ZN3Mpu17mpu_set_power_cfgEhh15MPU_wakeup_freq14MPU_clk_source>:

void Mpu::mpu_set_fifo_cfg(uint8_t cfg) {
	mpu_write_byte(MPU_REG_USER_CTRL, cfg);
}

void Mpu::mpu_set_power_cfg(uint8_t axis_disable, uint8_t power_opt, MPU_wakeup_freq lp_wakeup_freq, MPU_clk_source clksel) {
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	4608      	mov	r0, r1
 800205c:	4611      	mov	r1, r2
 800205e:	461a      	mov	r2, r3
 8002060:	4603      	mov	r3, r0
 8002062:	70fb      	strb	r3, [r7, #3]
 8002064:	460b      	mov	r3, r1
 8002066:	70bb      	strb	r3, [r7, #2]
 8002068:	4613      	mov	r3, r2
 800206a:	707b      	strb	r3, [r7, #1]
	mpu_write_byte(MPU_REG_PWR_MGMT_1, (clksel & 0x07) | (power_opt & 0xE8));
 800206c:	7c3b      	ldrb	r3, [r7, #16]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	b2da      	uxtb	r2, r3
 8002074:	78bb      	ldrb	r3, [r7, #2]
 8002076:	f023 0317 	bic.w	r3, r3, #23
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	216b      	movs	r1, #107	; 0x6b
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f890 	bl	80021aa <_ZN3Mpu14mpu_write_byteEhh>
	mpu_write_byte(MPU_REG_PWR_MGMT_2, (lp_wakeup_freq << 6) | (axis_disable & 0x3F));
 800208a:	787b      	ldrb	r3, [r7, #1]
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	b25a      	sxtb	r2, r3
 8002090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002098:	b25b      	sxtb	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	216c      	movs	r1, #108	; 0x6c
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f880 	bl	80021aa <_ZN3Mpu14mpu_write_byteEhh>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_ZN3Mpu22mpu_set_samplerate_divEh>:
	HAL_I2C_Mem_Read(mpu_i2c_handle, MPU_I2C_ADDR, MPU_REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &whoami, 1, HAL_MAX_DELAY);
	return whoami == (MPU_I2C_ADDR>>1);
}


void Mpu::mpu_set_samplerate_div(uint8_t div){
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
	mpu_write_byte(MPU_REG_SMPLRT_DIV, div);
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	461a      	mov	r2, r3
 80020c2:	2119      	movs	r1, #25
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f870 	bl	80021aa <_ZN3Mpu14mpu_write_byteEhh>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZN3Mpu15mpu_set_lowpassE12MPU_lpf_freq>:

void Mpu::mpu_set_lowpass(MPU_lpf_freq freq){
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	70fb      	strb	r3, [r7, #3]
	mpu_write_byte(MPU_REG_CONFIG, freq & 7);
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	211a      	movs	r1, #26
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f85d 	bl	80021aa <_ZN3Mpu14mpu_write_byteEhh>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZN3Mpu18mpu_gyro_calibrateEhP12GPIO_TypeDeft>:

void Mpu::mpu_gyro_calibrate(const uint8_t sample_count, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	72fb      	strb	r3, [r7, #11]
 8002108:	4613      	mov	r3, r2
 800210a:	813b      	strh	r3, [r7, #8]
	//mpu_raw_data_t raw;
	int16_t raw[3];
	uint8_t samples = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int32_t gyro_bias_sum[3]={0,0,0};
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
	//int32_t acc_total;

	while(samples < sample_count){
 800211e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002122:	7afb      	ldrb	r3, [r7, #11]
 8002124:	429a      	cmp	r2, r3
 8002126:	d227      	bcs.n	8002178 <_ZN3Mpu18mpu_gyro_calibrateEhP12GPIO_TypeDeft+0x80>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)){
 8002128:	893b      	ldrh	r3, [r7, #8]
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 ff1f 	bl	8002f70 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ed      	beq.n	800211e <_ZN3Mpu18mpu_gyro_calibrateEhP12GPIO_TypeDeft+0x26>
			mpu_read_gyro_raw(raw);
 8002142:	f107 0320 	add.w	r3, r7, #32
 8002146:	4619      	mov	r1, r3
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff fec5 	bl	8001ed8 <_ZN3Mpu17mpu_read_gyro_rawEPs>
			gyro_bias_sum[0] += raw[0];
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
			gyro_bias_sum[1] += raw[1];
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800215e:	4413      	add	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
			gyro_bias_sum[2] += raw[2];
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002168:	4413      	add	r3, r2
 800216a:	61fb      	str	r3, [r7, #28]
			samples++;
 800216c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002170:	3301      	adds	r3, #1
 8002172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(samples < sample_count){
 8002176:	e7d2      	b.n	800211e <_ZN3Mpu18mpu_gyro_calibrateEhP12GPIO_TypeDeft+0x26>
				samples++;
			}*/
		}
	}

	mpu_gyro_offset[0] = gyro_bias_sum[0] / sample_count;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	7afb      	ldrb	r3, [r7, #11]
 800217c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002180:	b21a      	sxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	819a      	strh	r2, [r3, #12]
	mpu_gyro_offset[1] = gyro_bias_sum[1] / sample_count;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	7afb      	ldrb	r3, [r7, #11]
 800218a:	fb92 f3f3 	sdiv	r3, r2, r3
 800218e:	b21a      	sxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	81da      	strh	r2, [r3, #14]
	mpu_gyro_offset[2] = gyro_bias_sum[2] / sample_count;
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	7afb      	ldrb	r3, [r7, #11]
 8002198:	fb92 f3f3 	sdiv	r3, r2, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	821a      	strh	r2, [r3, #16]
}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	; 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_ZN3Mpu14mpu_write_byteEhh>:

HAL_StatusTypeDef Mpu::mpu_write_byte(uint8_t addr, uint8_t dat){
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af02      	add	r7, sp, #8
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70fb      	strb	r3, [r7, #3]
 80021b6:	4613      	mov	r3, r2
 80021b8:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2] = {addr, dat};
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	733b      	strb	r3, [r7, #12]
 80021be:	78bb      	ldrb	r3, [r7, #2]
 80021c0:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(mpu_i2c_handle, MPU_I2C_ADDR, buf, 2, HAL_MAX_DELAY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	f107 020c 	add.w	r2, r7, #12
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2302      	movs	r3, #2
 80021d2:	21d0      	movs	r1, #208	; 0xd0
 80021d4:	f000 ffa4 	bl	8003120 <HAL_I2C_Master_Transmit>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_MspInit+0x44>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <HAL_MspInit+0x44>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6193      	str	r3, [r2, #24]
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_MspInit+0x44>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_MspInit+0x44>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_MspInit+0x44>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_MspInit+0x44>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <HardFault_Handler+0x4>

08002240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <MemManage_Handler+0x4>

08002246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <UsageFault_Handler+0x4>

08002252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002280:	f000 fb6a 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800228c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002290:	f000 fe9e 	bl	8002fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM6_DAC_IRQHandler+0x10>)
 800229e:	f002 ffbb 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000178 	.word	0x20000178

080022ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <SystemInit+0x28>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <SystemInit+0x28>)
 80022b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <SystemInit+0x28>)
 80022c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022c6:	609a      	str	r2, [r3, #8]
#endif
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ea:	463b      	mov	r3, r7
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
 80022f8:	615a      	str	r2, [r3, #20]
 80022fa:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <MX_TIM3_Init+0xc4>)
 80022fe:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <MX_TIM3_Init+0xc8>)
 8002300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <MX_TIM3_Init+0xc4>)
 8002304:	223f      	movs	r2, #63	; 0x3f
 8002306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <MX_TIM3_Init+0xc4>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <MX_TIM3_Init+0xc4>)
 8002310:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002314:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <MX_TIM3_Init+0xc4>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <MX_TIM3_Init+0xc4>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002322:	481e      	ldr	r0, [pc, #120]	; (800239c <MX_TIM3_Init+0xc4>)
 8002324:	f002 feae 	bl	8005084 <HAL_TIM_PWM_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800232e:	f7ff fd44 	bl	8001dba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	4816      	ldr	r0, [pc, #88]	; (800239c <MX_TIM3_Init+0xc4>)
 8002342:	f003 fd55 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800234c:	f7ff fd35 	bl	8001dba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002350:	2360      	movs	r3, #96	; 0x60
 8002352:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002354:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002358:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002362:	463b      	mov	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	4619      	mov	r1, r3
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <MX_TIM3_Init+0xc4>)
 800236a:	f003 f875 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002374:	f7ff fd21 	bl	8001dba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002378:	463b      	mov	r3, r7
 800237a:	2204      	movs	r2, #4
 800237c:	4619      	mov	r1, r3
 800237e:	4807      	ldr	r0, [pc, #28]	; (800239c <MX_TIM3_Init+0xc4>)
 8002380:	f003 f86a 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800238a:	f7ff fd16 	bl	8001dba <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800238e:	4803      	ldr	r0, [pc, #12]	; (800239c <MX_TIM3_Init+0xc4>)
 8002390:	f000 f914 	bl	80025bc <HAL_TIM_MspPostInit>

}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000138 	.word	0x20000138
 80023a0:	40000400 	.word	0x40000400

080023a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023aa:	f107 031c 	add.w	r3, r7, #28
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b6:	463b      	mov	r3, r7
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
 80023c4:	615a      	str	r2, [r3, #20]
 80023c6:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <MX_TIM4_Init+0xdc>)
 80023ca:	4a2e      	ldr	r2, [pc, #184]	; (8002484 <MX_TIM4_Init+0xe0>)
 80023cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <MX_TIM4_Init+0xdc>)
 80023d0:	223f      	movs	r2, #63	; 0x3f
 80023d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <MX_TIM4_Init+0xdc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <MX_TIM4_Init+0xdc>)
 80023dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80023e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b27      	ldr	r3, [pc, #156]	; (8002480 <MX_TIM4_Init+0xdc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <MX_TIM4_Init+0xdc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023ee:	4824      	ldr	r0, [pc, #144]	; (8002480 <MX_TIM4_Init+0xdc>)
 80023f0:	f002 fe48 	bl	8005084 <HAL_TIM_PWM_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80023fa:	f7ff fcde 	bl	8001dba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4619      	mov	r1, r3
 800240c:	481c      	ldr	r0, [pc, #112]	; (8002480 <MX_TIM4_Init+0xdc>)
 800240e:	f003 fcef 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002418:	f7ff fccf 	bl	8001dba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241c:	2360      	movs	r3, #96	; 0x60
 800241e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002420:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002424:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800242e:	463b      	mov	r3, r7
 8002430:	2200      	movs	r2, #0
 8002432:	4619      	mov	r1, r3
 8002434:	4812      	ldr	r0, [pc, #72]	; (8002480 <MX_TIM4_Init+0xdc>)
 8002436:	f003 f80f 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002440:	f7ff fcbb 	bl	8001dba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002444:	463b      	mov	r3, r7
 8002446:	2204      	movs	r2, #4
 8002448:	4619      	mov	r1, r3
 800244a:	480d      	ldr	r0, [pc, #52]	; (8002480 <MX_TIM4_Init+0xdc>)
 800244c:	f003 f804 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002456:	f7ff fcb0 	bl	8001dba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800245a:	463b      	mov	r3, r7
 800245c:	2208      	movs	r2, #8
 800245e:	4619      	mov	r1, r3
 8002460:	4807      	ldr	r0, [pc, #28]	; (8002480 <MX_TIM4_Init+0xdc>)
 8002462:	f002 fff9 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 800246c:	f7ff fca5 	bl	8001dba <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <MX_TIM4_Init+0xdc>)
 8002472:	f000 f8a3 	bl	80025bc <HAL_TIM_MspPostInit>

}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200000f8 	.word	0x200000f8
 8002484:	40000800 	.word	0x40000800

08002488 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <MX_TIM6_Init+0x78>)
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <MX_TIM6_Init+0x7c>)
 800249c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <MX_TIM6_Init+0x78>)
 80024a0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80024a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_TIM6_Init+0x78>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <MX_TIM6_Init+0x78>)
 80024ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MX_TIM6_Init+0x78>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024ba:	4811      	ldr	r0, [pc, #68]	; (8002500 <MX_TIM6_Init+0x78>)
 80024bc:	f002 fd8c 	bl	8004fd8 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80024c6:	f7ff fc78 	bl	8001dba <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 80024ca:	2108      	movs	r1, #8
 80024cc:	480c      	ldr	r0, [pc, #48]	; (8002500 <MX_TIM6_Init+0x78>)
 80024ce:	f002 fe5d 	bl	800518c <HAL_TIM_OnePulse_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM6_Init+0x54>
  {
    Error_Handler();
 80024d8:	f7ff fc6f 	bl	8001dba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_TIM6_Init+0x78>)
 80024ea:	f003 fc81 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM6_Init+0x70>
  {
    Error_Handler();
 80024f4:	f7ff fc61 	bl	8001dba <Error_Handler>
  }

}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000178 	.word	0x20000178
 8002504:	40001000 	.word	0x40001000

08002508 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a13      	ldr	r2, [pc, #76]	; (8002564 <HAL_TIM_PWM_MspInit+0x5c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10c      	bne.n	8002534 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <HAL_TIM_PWM_MspInit+0x60>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <HAL_TIM_PWM_MspInit+0x60>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	61d3      	str	r3, [r2, #28]
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_TIM_PWM_MspInit+0x60>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002532:	e010      	b.n	8002556 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0c      	ldr	r2, [pc, #48]	; (800256c <HAL_TIM_PWM_MspInit+0x64>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10b      	bne.n	8002556 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_TIM_PWM_MspInit+0x60>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_TIM_PWM_MspInit+0x60>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_TIM_PWM_MspInit+0x60>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40000400 	.word	0x40000400
 8002568:	40021000 	.word	0x40021000
 800256c:	40000800 	.word	0x40000800

08002570 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <HAL_TIM_Base_MspInit+0x44>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d113      	bne.n	80025aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_TIM_Base_MspInit+0x48>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <HAL_TIM_Base_MspInit+0x48>)
 8002588:	f043 0310 	orr.w	r3, r3, #16
 800258c:	61d3      	str	r3, [r2, #28]
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_TIM_Base_MspInit+0x48>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2036      	movs	r0, #54	; 0x36
 80025a0:	f000 faf7 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025a4:	2036      	movs	r0, #54	; 0x36
 80025a6:	f000 fb10 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40001000 	.word	0x40001000
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a32      	ldr	r2, [pc, #200]	; (80026a4 <HAL_TIM_MspPostInit+0xe8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d11d      	bne.n	800261a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	6153      	str	r3, [r2, #20]
 80025ea:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f6:	23c0      	movs	r3, #192	; 0xc0
 80025f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002606:	2302      	movs	r3, #2
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002614:	f000 fb32 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002618:	e03f      	b.n	800269a <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM4)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_TIM_MspPostInit+0xf0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d13a      	bne.n	800269a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 800262a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262e:	6153      	str	r3, [r2, #20]
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 8002642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002646:	6153      	str	r3, [r2, #20]
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_TIM_MspPostInit+0xec>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002654:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002662:	2301      	movs	r3, #1
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002666:	230a      	movs	r3, #10
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002674:	f000 fb02 	bl	8002c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002686:	2301      	movs	r3, #1
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800268a:	2302      	movs	r3, #2
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <HAL_TIM_MspPostInit+0xf4>)
 8002696:	f000 faf1 	bl	8002c7c <HAL_GPIO_Init>
}
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	; 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40000800 	.word	0x40000800
 80026b0:	48000400 	.word	0x48000400

080026b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <MX_USART1_UART_Init+0x64>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026c0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80026c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026f2:	2220      	movs	r2, #32
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <MX_USART1_UART_Init+0x60>)
 80026f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026fe:	4805      	ldr	r0, [pc, #20]	; (8002714 <MX_USART1_UART_Init+0x60>)
 8002700:	f003 fc14 	bl	8005f2c <HAL_UART_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800270a:	f7ff fb56 	bl	8001dba <Error_Handler>
  }

}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000238 	.word	0x20000238
 8002718:	40013800 	.word	0x40013800

0800271c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <MX_USART3_UART_Init+0x58>)
 8002722:	4a15      	ldr	r2, [pc, #84]	; (8002778 <MX_USART3_UART_Init+0x5c>)
 8002724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <MX_USART3_UART_Init+0x58>)
 8002728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800272c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_USART3_UART_Init+0x58>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <MX_USART3_UART_Init+0x58>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_USART3_UART_Init+0x58>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_USART3_UART_Init+0x58>)
 8002742:	2204      	movs	r2, #4
 8002744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <MX_USART3_UART_Init+0x58>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_USART3_UART_Init+0x58>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <MX_USART3_UART_Init+0x58>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_USART3_UART_Init+0x58>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <MX_USART3_UART_Init+0x58>)
 8002760:	f003 fbe4 	bl	8005f2c <HAL_UART_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800276a:	f7ff fb26 	bl	8001dba <Error_Handler>
  }

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200001b8 	.word	0x200001b8
 8002778:	40004800 	.word	0x40004800

0800277c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a33      	ldr	r2, [pc, #204]	; (8002868 <HAL_UART_MspInit+0xec>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d12a      	bne.n	80027f4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279e:	4b33      	ldr	r3, [pc, #204]	; (800286c <HAL_UART_MspInit+0xf0>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a32      	ldr	r2, [pc, #200]	; (800286c <HAL_UART_MspInit+0xf0>)
 80027a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_UART_MspInit+0xf0>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_UART_MspInit+0xf0>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4a2c      	ldr	r2, [pc, #176]	; (800286c <HAL_UART_MspInit+0xf0>)
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	6153      	str	r3, [r2, #20]
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_UART_MspInit+0xf0>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e0:	2307      	movs	r3, #7
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	f107 031c 	add.w	r3, r7, #28
 80027e8:	4619      	mov	r1, r3
 80027ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ee:	f000 fa45 	bl	8002c7c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027f2:	e035      	b.n	8002860 <HAL_UART_MspInit+0xe4>
  else if(uartHandle->Instance==USART3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_UART_MspInit+0xf4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d130      	bne.n	8002860 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002808:	61d3      	str	r3, [r2, #28]
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_UART_MspInit+0xf0>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_UART_MspInit+0xf0>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002820:	6153      	str	r3, [r2, #20]
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800282e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002840:	2307      	movs	r3, #7
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	480a      	ldr	r0, [pc, #40]	; (8002874 <HAL_UART_MspInit+0xf8>)
 800284c:	f000 fa16 	bl	8002c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	2027      	movs	r0, #39	; 0x27
 8002856:	f000 f99c 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800285a:	2027      	movs	r0, #39	; 0x27
 800285c:	f000 f9b5 	bl	8002bca <HAL_NVIC_EnableIRQ>
}
 8002860:	bf00      	nop
 8002862:	3730      	adds	r7, #48	; 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40013800 	.word	0x40013800
 800286c:	40021000 	.word	0x40021000
 8002870:	40004800 	.word	0x40004800
 8002874:	48000400 	.word	0x48000400

08002878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800287c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800287e:	e003      	b.n	8002888 <LoopCopyDataInit>

08002880 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002882:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002884:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002886:	3104      	adds	r1, #4

08002888 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002888:	480b      	ldr	r0, [pc, #44]	; (80028b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800288c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800288e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002890:	d3f6      	bcc.n	8002880 <CopyDataInit>
	ldr	r2, =_sbss
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002894:	e002      	b.n	800289c <LoopFillZerobss>

08002896 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002896:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002898:	f842 3b04 	str.w	r3, [r2], #4

0800289c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <LoopForever+0x16>)
	cmp	r2, r3
 800289e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80028a0:	d3f9      	bcc.n	8002896 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028a2:	f7ff fd03 	bl	80022ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028a6:	f004 f8bf 	bl	8006a28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028aa:	f7fe fead 	bl	8001608 <main>

080028ae <LoopForever>:

LoopForever:
    b LoopForever
 80028ae:	e7fe      	b.n	80028ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028b0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80028b4:	08006af8 	.word	0x08006af8
	ldr	r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80028bc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80028c0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80028c4:	200002bc 	.word	0x200002bc

080028c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC1_2_IRQHandler>
	...

080028cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_Init+0x28>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <HAL_Init+0x28>)
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f000 f94d 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f000 f808 	bl	80028f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e8:	f7ff fc7c 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000

080028f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x54>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x58>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f965 	bl	8002be6 <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002934:	f000 f92d 	bl	8002b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <HAL_InitTick+0x5c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000000 	.word	0x20000000
 8002950:	20000008 	.word	0x20000008
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x20>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_IncTick+0x24>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_IncTick+0x24>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000008 	.word	0x20000008
 800297c:	200002b8 	.word	0x200002b8

08002980 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return uwTick;  
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_GetTick+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	200002b8 	.word	0x200002b8

08002998 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a0:	f7ff ffee 	bl	8002980 <HAL_GetTick>
 80029a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b0:	d005      	beq.n	80029be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_Delay+0x40>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80029be:	bf00      	nop
 80029c0:	f7ff ffde 	bl	8002980 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d8f7      	bhi.n	80029c0 <HAL_Delay+0x28>
  {
  }
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000008 	.word	0x20000008

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff29 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff3e 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff31 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ffa2 	bl	8002b38 <SysTick_Config>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d005      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2204      	movs	r2, #4
 8002c18:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e027      	b.n	8002c70 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 020e 	bic.w	r2, r2, #14
 8002c2e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
    } 
  }
  return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8a:	e154      	b.n	8002f36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8146 	beq.w	8002f30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d00b      	beq.n	8002cc4 <HAL_GPIO_Init+0x48>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d007      	beq.n	8002cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cb8:	2b11      	cmp	r3, #17
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b12      	cmp	r3, #18
 8002cc2:	d130      	bne.n	8002d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0201 	and.w	r2, r3, #1
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0xea>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d123      	bne.n	8002dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	6939      	ldr	r1, [r7, #16]
 8002daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0203 	and.w	r2, r3, #3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80a0 	beq.w	8002f30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df0:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <HAL_GPIO_Init+0x2d8>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_GPIO_Init+0x2d8>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6193      	str	r3, [r2, #24]
 8002dfc:	4b55      	ldr	r3, [pc, #340]	; (8002f54 <HAL_GPIO_Init+0x2d8>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e08:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <HAL_GPIO_Init+0x2dc>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	220f      	movs	r2, #15
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e32:	d019      	beq.n	8002e68 <HAL_GPIO_Init+0x1ec>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a49      	ldr	r2, [pc, #292]	; (8002f5c <HAL_GPIO_Init+0x2e0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_GPIO_Init+0x1e8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a48      	ldr	r2, [pc, #288]	; (8002f60 <HAL_GPIO_Init+0x2e4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00d      	beq.n	8002e60 <HAL_GPIO_Init+0x1e4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a47      	ldr	r2, [pc, #284]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <HAL_GPIO_Init+0x1e0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a46      	ldr	r2, [pc, #280]	; (8002f68 <HAL_GPIO_Init+0x2ec>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_GPIO_Init+0x1dc>
 8002e54:	2304      	movs	r3, #4
 8002e56:	e008      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e58:	2305      	movs	r3, #5
 8002e5a:	e006      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e004      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e002      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	f002 0203 	and.w	r2, r2, #3
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	4093      	lsls	r3, r2
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e7a:	4937      	ldr	r1, [pc, #220]	; (8002f58 <HAL_GPIO_Init+0x2dc>)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e88:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002eac:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ed6:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f00:	4a1a      	ldr	r2, [pc, #104]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f2a:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3301      	adds	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f47f aea3 	bne.w	8002c8c <HAL_GPIO_Init+0x10>
  }
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	48000400 	.word	0x48000400
 8002f60:	48000800 	.word	0x48000800
 8002f64:	48000c00 	.word	0x48000c00
 8002f68:	48001000 	.word	0x48001000
 8002f6c:	40010400 	.word	0x40010400

08002f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e001      	b.n	8002f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fbc:	e002      	b.n	8002fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe f8a6 	bl	8001140 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40010400 	.word	0x40010400

08003000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e081      	b.n	8003116 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe f83c 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	; 0x24
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003050:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003060:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	e006      	b.n	8003088 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003086:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d104      	bne.n	800309a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003098:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	ea42 0103 	orr.w	r1, r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	021a      	lsls	r2, r3, #8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69d9      	ldr	r1, [r3, #28]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1a      	ldr	r2, [r3, #32]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	461a      	mov	r2, r3
 800312c:	460b      	mov	r3, r1
 800312e:	817b      	strh	r3, [r7, #10]
 8003130:	4613      	mov	r3, r2
 8003132:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b20      	cmp	r3, #32
 800313e:	f040 80da 	bne.w	80032f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_I2C_Master_Transmit+0x30>
 800314c:	2302      	movs	r3, #2
 800314e:	e0d3      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1d8>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003158:	f7ff fc12 	bl	8002980 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2319      	movs	r3, #25
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fa5e 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0be      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2221      	movs	r2, #33	; 0x21
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2210      	movs	r2, #16
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	893a      	ldrh	r2, [r7, #8]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2bff      	cmp	r3, #255	; 0xff
 80031aa:	d90e      	bls.n	80031ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	22ff      	movs	r2, #255	; 0xff
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	8979      	ldrh	r1, [r7, #10]
 80031ba:	4b51      	ldr	r3, [pc, #324]	; (8003300 <HAL_I2C_Master_Transmit+0x1e0>)
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fb54 	bl	8003870 <I2C_TransferConfig>
 80031c8:	e06c      	b.n	80032a4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	8979      	ldrh	r1, [r7, #10]
 80031dc:	4b48      	ldr	r3, [pc, #288]	; (8003300 <HAL_I2C_Master_Transmit+0x1e0>)
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fb43 	bl	8003870 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80031ea:	e05b      	b.n	80032a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	6a39      	ldr	r1, [r7, #32]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fa5b 	bl	80036ac <I2C_WaitOnTXISFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e07b      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d034      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x184>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	2b00      	cmp	r3, #0
 8003240:	d130      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2200      	movs	r2, #0
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f9ed 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e04d      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	2bff      	cmp	r3, #255	; 0xff
 8003264:	d90e      	bls.n	8003284 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	22ff      	movs	r2, #255	; 0xff
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	b2da      	uxtb	r2, r3
 8003272:	8979      	ldrh	r1, [r7, #10]
 8003274:	2300      	movs	r3, #0
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 faf7 	bl	8003870 <I2C_TransferConfig>
 8003282:	e00f      	b.n	80032a4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	b2da      	uxtb	r2, r3
 8003294:	8979      	ldrh	r1, [r7, #10]
 8003296:	2300      	movs	r3, #0
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fae6 	bl	8003870 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d19e      	bne.n	80031ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	6a39      	ldr	r1, [r7, #32]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa3a 	bl	800372c <I2C_WaitOnSTOPFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e01a      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2220      	movs	r2, #32
 80032c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_I2C_Master_Transmit+0x1e4>)
 80032d6:	400b      	ands	r3, r1
 80032d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	80002000 	.word	0x80002000
 8003304:	fe00e800 	.word	0xfe00e800

08003308 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	461a      	mov	r2, r3
 8003316:	4603      	mov	r3, r0
 8003318:	817b      	strh	r3, [r7, #10]
 800331a:	460b      	mov	r3, r1
 800331c:	813b      	strh	r3, [r7, #8]
 800331e:	4613      	mov	r3, r2
 8003320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b20      	cmp	r3, #32
 800332c:	f040 80fd 	bne.w	800352a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_I2C_Mem_Read+0x34>
 8003336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0f1      	b.n	800352c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_I2C_Mem_Read+0x4e>
 8003352:	2302      	movs	r3, #2
 8003354:	e0ea      	b.n	800352c <HAL_I2C_Mem_Read+0x224>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800335e:	f7ff fb0f 	bl	8002980 <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2319      	movs	r3, #25
 800336a:	2201      	movs	r2, #1
 800336c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f95b 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0d5      	b.n	800352c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2222      	movs	r2, #34	; 0x22
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2240      	movs	r2, #64	; 0x40
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033a8:	88f8      	ldrh	r0, [r7, #6]
 80033aa:	893a      	ldrh	r2, [r7, #8]
 80033ac:	8979      	ldrh	r1, [r7, #10]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	4603      	mov	r3, r0
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f8bf 	bl	800353c <I2C_RequestMemoryRead>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0ad      	b.n	800352c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2bff      	cmp	r3, #255	; 0xff
 80033d8:	d90e      	bls.n	80033f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	8979      	ldrh	r1, [r7, #10]
 80033e8:	4b52      	ldr	r3, [pc, #328]	; (8003534 <HAL_I2C_Mem_Read+0x22c>)
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fa3d 	bl	8003870 <I2C_TransferConfig>
 80033f6:	e00f      	b.n	8003418 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	b2da      	uxtb	r2, r3
 8003408:	8979      	ldrh	r1, [r7, #10]
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_I2C_Mem_Read+0x22c>)
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa2c 	bl	8003870 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	2200      	movs	r2, #0
 8003420:	2104      	movs	r1, #4
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f902 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07c      	b.n	800352c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d034      	beq.n	80034d8 <HAL_I2C_Mem_Read+0x1d0>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	d130      	bne.n	80034d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	2200      	movs	r2, #0
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f8d3 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e04d      	b.n	800352c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2bff      	cmp	r3, #255	; 0xff
 8003498:	d90e      	bls.n	80034b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	8979      	ldrh	r1, [r7, #10]
 80034a8:	2300      	movs	r3, #0
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f9dd 	bl	8003870 <I2C_TransferConfig>
 80034b6:	e00f      	b.n	80034d8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	8979      	ldrh	r1, [r7, #10]
 80034ca:	2300      	movs	r3, #0
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f9cc 	bl	8003870 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d19a      	bne.n	8003418 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f920 	bl	800372c <I2C_WaitOnSTOPFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e01a      	b.n	800352c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2220      	movs	r2, #32
 80034fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_I2C_Mem_Read+0x230>)
 800350a:	400b      	ands	r3, r1
 800350c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e000      	b.n	800352c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
  }
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	80002400 	.word	0x80002400
 8003538:	fe00e800 	.word	0xfe00e800

0800353c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	4608      	mov	r0, r1
 8003546:	4611      	mov	r1, r2
 8003548:	461a      	mov	r2, r3
 800354a:	4603      	mov	r3, r0
 800354c:	817b      	strh	r3, [r7, #10]
 800354e:	460b      	mov	r3, r1
 8003550:	813b      	strh	r3, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	8979      	ldrh	r1, [r7, #10]
 800355c:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <I2C_RequestMemoryRead+0xa4>)
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f984 	bl	8003870 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	69b9      	ldr	r1, [r7, #24]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f89d 	bl	80036ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e02c      	b.n	80035d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d105      	bne.n	800358e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003582:	893b      	ldrh	r3, [r7, #8]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
 800358c:	e015      	b.n	80035ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800358e:	893b      	ldrh	r3, [r7, #8]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	b29b      	uxth	r3, r3
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f883 	bl	80036ac <I2C_WaitOnTXISFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e012      	b.n	80035d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035b0:	893b      	ldrh	r3, [r7, #8]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2140      	movs	r1, #64	; 0x40
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f831 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	80002000 	.word	0x80002000

080035e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d103      	bne.n	8003602 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d007      	beq.n	8003620 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	619a      	str	r2, [r3, #24]
  }
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800363c:	e022      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003644:	d01e      	beq.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7ff f99b 	bl	8002980 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d113      	bne.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e00f      	b.n	80036a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d0cd      	beq.n	800363e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036b8:	e02c      	b.n	8003714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f870 	bl	80037a4 <I2C_IsAcknowledgeFailed>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e02a      	b.n	8003724 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d4:	d01e      	beq.n	8003714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7ff f953 	bl	8002980 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d113      	bne.n	8003714 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e007      	b.n	8003724 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d1cb      	bne.n	80036ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003738:	e028      	b.n	800378c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f830 	bl	80037a4 <I2C_IsAcknowledgeFailed>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e026      	b.n	800379c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7ff f917 	bl	8002980 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d113      	bne.n	800378c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e007      	b.n	800379c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b20      	cmp	r3, #32
 8003798:	d1cf      	bne.n	800373a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d151      	bne.n	8003862 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037be:	e022      	b.n	8003806 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c6:	d01e      	beq.n	8003806 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c8:	f7ff f8da 	bl	8002980 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <I2C_IsAcknowledgeFailed+0x3a>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d113      	bne.n	8003806 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e02e      	b.n	8003864 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b20      	cmp	r3, #32
 8003812:	d1d5      	bne.n	80037c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2210      	movs	r2, #16
 800381a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2220      	movs	r2, #32
 8003822:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff fedd 	bl	80035e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b0d      	ldr	r3, [pc, #52]	; (800386c <I2C_IsAcknowledgeFailed+0xc8>)
 8003836:	400b      	ands	r3, r1
 8003838:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	fe00e800 	.word	0xfe00e800

08003870 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	817b      	strh	r3, [r7, #10]
 800387e:	4613      	mov	r3, r2
 8003880:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	0d5b      	lsrs	r3, r3, #21
 800388c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <I2C_TransferConfig+0x58>)
 8003892:	430b      	orrs	r3, r1
 8003894:	43db      	mvns	r3, r3
 8003896:	ea02 0103 	and.w	r1, r2, r3
 800389a:	897b      	ldrh	r3, [r7, #10]
 800389c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038a0:	7a7b      	ldrb	r3, [r7, #9]
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	03ff63ff 	.word	0x03ff63ff

080038cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d138      	bne.n	8003954 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e032      	b.n	8003956 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800391e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b20      	cmp	r3, #32
 8003976:	d139      	bne.n	80039ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003982:	2302      	movs	r3, #2
 8003984:	e033      	b.n	80039ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2224      	movs	r2, #36	; 0x24
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f000 bef4 	b.w	80047fe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 816a 	beq.w	8003cfa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a26:	4bb3      	ldr	r3, [pc, #716]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d00c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a32:	4bb0      	ldr	r3, [pc, #704]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d159      	bne.n	8003af2 <HAL_RCC_OscConfig+0xf6>
 8003a3e:	4bad      	ldr	r3, [pc, #692]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4a:	d152      	bne.n	8003af2 <HAL_RCC_OscConfig+0xf6>
 8003a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a50:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a60:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d102      	bne.n	8003a7e <HAL_RCC_OscConfig+0x82>
 8003a78:	4b9e      	ldr	r3, [pc, #632]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0xae>
 8003a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a82:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a96:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a9a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003aa6:	4b93      	ldr	r3, [pc, #588]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003ab2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003ab6:	fa92 f2a2 	rbit	r2, r2
 8003aba:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003abe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003ac2:	fab2 f282 	clz	r2, r2
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	f042 0220 	orr.w	r2, r2, #32
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	f002 021f 	and.w	r2, r2, #31
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 810c 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x2fc>
 8003ae0:	1d3b      	adds	r3, r7, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 8106 	bne.w	8003cf8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f000 be86 	b.w	80047fe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af2:	1d3b      	adds	r3, r7, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x110>
 8003afe:	4b7d      	ldr	r3, [pc, #500]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7c      	ldr	r2, [pc, #496]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e030      	b.n	8003b6e <HAL_RCC_OscConfig+0x172>
 8003b0c:	1d3b      	adds	r3, r7, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x134>
 8003b16:	4b77      	ldr	r3, [pc, #476]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a76      	ldr	r2, [pc, #472]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b74      	ldr	r3, [pc, #464]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a73      	ldr	r2, [pc, #460]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e01e      	b.n	8003b6e <HAL_RCC_OscConfig+0x172>
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b3a:	d10c      	bne.n	8003b56 <HAL_RCC_OscConfig+0x15a>
 8003b3c:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6c      	ldr	r2, [pc, #432]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a69      	ldr	r2, [pc, #420]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e00b      	b.n	8003b6e <HAL_RCC_OscConfig+0x172>
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a66      	ldr	r2, [pc, #408]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b64      	ldr	r3, [pc, #400]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a63      	ldr	r2, [pc, #396]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b6e:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f023 020f 	bic.w	r2, r3, #15
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	495d      	ldr	r1, [pc, #372]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d059      	beq.n	8003c40 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fef8 	bl	8002980 <HAL_GetTick>
 8003b90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b96:	f7fe fef3 	bl	8002980 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d902      	bls.n	8003bac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	f000 be29 	b.w	80047fe <HAL_RCC_OscConfig+0xe02>
 8003bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003bc0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d102      	bne.n	8003bde <HAL_RCC_OscConfig+0x1e2>
 8003bd8:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x20e>
 8003bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bf6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003bfa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c06:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c16:	fa92 f2a2 	rbit	r2, r2
 8003c1a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f042 0220 	orr.w	r2, r2, #32
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f002 021f 	and.w	r2, r2, #31
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0ab      	beq.n	8003b96 <HAL_RCC_OscConfig+0x19a>
 8003c3e:	e05c      	b.n	8003cfa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fe fe9e 	bl	8002980 <HAL_GetTick>
 8003c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4a:	f7fe fe99 	bl	8002980 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d902      	bls.n	8003c60 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	f000 bdcf 	b.w	80047fe <HAL_RCC_OscConfig+0xe02>
 8003c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003c74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCC_OscConfig+0x296>
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x2c2>
 8003c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003caa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003cae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_RCC_OscConfig+0x2f8>)
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cc2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003cc6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003cca:	fa92 f2a2 	rbit	r2, r2
 8003cce:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003cd2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003cd6:	fab2 f282 	clz	r2, r2
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f042 0220 	orr.w	r2, r2, #32
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f002 021f 	and.w	r2, r2, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ab      	bne.n	8003c4a <HAL_RCC_OscConfig+0x24e>
 8003cf2:	e002      	b.n	8003cfa <HAL_RCC_OscConfig+0x2fe>
 8003cf4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 816f 	beq.w	8003fe8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d0a:	4bd0      	ldr	r3, [pc, #832]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d16:	4bcd      	ldr	r3, [pc, #820]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d16c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x400>
 8003d22:	4bca      	ldr	r3, [pc, #808]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d166      	bne.n	8003dfc <HAL_RCC_OscConfig+0x400>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <HAL_RCC_OscConfig+0x362>
 8003d58:	4bbc      	ldr	r3, [pc, #752]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	e013      	b.n	8003d86 <HAL_RCC_OscConfig+0x38a>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d70:	2302      	movs	r3, #2
 8003d72:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003d82:	4bb2      	ldr	r3, [pc, #712]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2202      	movs	r2, #2
 8003d88:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003d8c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003d90:	fa92 f2a2 	rbit	r2, r2
 8003d94:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003d98:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003d9c:	fab2 f282 	clz	r2, r2
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	f042 0220 	orr.w	r2, r2, #32
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	f002 021f 	and.w	r2, r2, #31
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f202 	lsl.w	r2, r1, r2
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x3cc>
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d002      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f000 bd1b 	b.w	80047fe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc8:	4ba0      	ldr	r3, [pc, #640]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	21f8      	movs	r1, #248	; 0xf8
 8003dd8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003de0:	fa91 f1a1 	rbit	r1, r1
 8003de4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003de8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003dec:	fab1 f181 	clz	r1, r1
 8003df0:	b2c9      	uxtb	r1, r1
 8003df2:	408b      	lsls	r3, r1
 8003df4:	4995      	ldr	r1, [pc, #596]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	e0f5      	b.n	8003fe8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8085 	beq.w	8003f12 <HAL_RCC_OscConfig+0x516>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2301      	movs	r3, #1
 8003e32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe fda4 	bl	8002980 <HAL_GetTick>
 8003e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3e:	f7fe fd9f 	bl	8002980 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d902      	bls.n	8003e54 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	f000 bcd5 	b.w	80047fe <HAL_RCC_OscConfig+0xe02>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003e66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_OscConfig+0x488>
 8003e7e:	4b73      	ldr	r3, [pc, #460]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	e013      	b.n	8003eac <HAL_RCC_OscConfig+0x4b0>
 8003e84:	2302      	movs	r3, #2
 8003e86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003e96:	2302      	movs	r3, #2
 8003e98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003ea8:	4b68      	ldr	r3, [pc, #416]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2202      	movs	r2, #2
 8003eae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003eb2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003eb6:	fa92 f2a2 	rbit	r2, r2
 8003eba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003ebe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003ec2:	fab2 f282 	clz	r2, r2
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f042 0220 	orr.w	r2, r2, #32
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f002 021f 	and.w	r2, r2, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0af      	beq.n	8003e3e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b5b      	ldr	r3, [pc, #364]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	21f8      	movs	r1, #248	; 0xf8
 8003eee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ef6:	fa91 f1a1 	rbit	r1, r1
 8003efa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003efe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f02:	fab1 f181 	clz	r1, r1
 8003f06:	b2c9      	uxtb	r1, r1
 8003f08:	408b      	lsls	r3, r1
 8003f0a:	4950      	ldr	r1, [pc, #320]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
 8003f10:	e06a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x5ec>
 8003f12:	2301      	movs	r3, #1
 8003f14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3e:	f7fe fd1f 	bl	8002980 <HAL_GetTick>
 8003f42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fe fd1a 	bl	8002980 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d902      	bls.n	8003f5e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	f000 bc50 	b.w	80047fe <HAL_RCC_OscConfig+0xe02>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d102      	bne.n	8003f8e <HAL_RCC_OscConfig+0x592>
 8003f88:	4b30      	ldr	r3, [pc, #192]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	e013      	b.n	8003fb6 <HAL_RCC_OscConfig+0x5ba>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fa6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fb2:	4b26      	ldr	r3, [pc, #152]	; (800404c <HAL_RCC_OscConfig+0x650>)
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003fbc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003fc0:	fa92 f2a2 	rbit	r2, r2
 8003fc4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003fc8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003fcc:	fab2 f282 	clz	r2, r2
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	f042 0220 	orr.w	r2, r2, #32
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	f002 021f 	and.w	r2, r2, #31
 8003fdc:	2101      	movs	r1, #1
 8003fde:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1af      	bne.n	8003f48 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe8:	1d3b      	adds	r3, r7, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80da 	beq.w	80041ac <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff8:	1d3b      	adds	r3, r7, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d069      	beq.n	80040d6 <HAL_RCC_OscConfig+0x6da>
 8004002:	2301      	movs	r3, #1
 8004004:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_OscConfig+0x654>)
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	461a      	mov	r2, r3
 8004028:	2301      	movs	r3, #1
 800402a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402c:	f7fe fca8 	bl	8002980 <HAL_GetTick>
 8004030:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004034:	e00e      	b.n	8004054 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004036:	f7fe fca3 	bl	8002980 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d906      	bls.n	8004054 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e3d9      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
 8004050:	10908120 	.word	0x10908120
 8004054:	2302      	movs	r3, #2
 8004056:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004066:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800406a:	2202      	movs	r2, #2
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	fa93 f2a3 	rbit	r2, r3
 8004078:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004082:	2202      	movs	r2, #2
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004094:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4ba5      	ldr	r3, [pc, #660]	; (800432c <HAL_RCC_OscConfig+0x930>)
 8004098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800409a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800409e:	2102      	movs	r1, #2
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fa93 f1a3 	rbit	r1, r3
 80040ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80040b0:	6019      	str	r1, [r3, #0]
  return result;
 80040b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2101      	movs	r1, #1
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0b0      	beq.n	8004036 <HAL_RCC_OscConfig+0x63a>
 80040d4:	e06a      	b.n	80041ac <HAL_RCC_OscConfig+0x7b0>
 80040d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	fa93 f2a3 	rbit	r2, r3
 80040e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80040ec:	601a      	str	r2, [r3, #0]
  return result;
 80040ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80040f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f4:	fab3 f383 	clz	r3, r3
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	4b8c      	ldr	r3, [pc, #560]	; (8004330 <HAL_RCC_OscConfig+0x934>)
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	461a      	mov	r2, r3
 8004104:	2300      	movs	r3, #0
 8004106:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fe fc3a 	bl	8002980 <HAL_GetTick>
 800410c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004110:	e009      	b.n	8004126 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004112:	f7fe fc35 	bl	8002980 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e36b      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
 8004126:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800412a:	2202      	movs	r2, #2
 800412c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	fa93 f2a3 	rbit	r2, r3
 8004138:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004142:	2202      	movs	r2, #2
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	fa93 f2a3 	rbit	r2, r3
 8004150:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800415a:	2202      	movs	r2, #2
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	fa93 f2a3 	rbit	r2, r3
 8004168:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800416c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416e:	4b6f      	ldr	r3, [pc, #444]	; (800432c <HAL_RCC_OscConfig+0x930>)
 8004170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004172:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004176:	2102      	movs	r1, #2
 8004178:	6019      	str	r1, [r3, #0]
 800417a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	fa93 f1a3 	rbit	r1, r3
 8004184:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004188:	6019      	str	r1, [r3, #0]
  return result;
 800418a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	fab3 f383 	clz	r3, r3
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1b2      	bne.n	8004112 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8158 	beq.w	800446c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4b5a      	ldr	r3, [pc, #360]	; (800432c <HAL_RCC_OscConfig+0x930>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d112      	bne.n	80041f4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	4b57      	ldr	r3, [pc, #348]	; (800432c <HAL_RCC_OscConfig+0x930>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4a56      	ldr	r2, [pc, #344]	; (800432c <HAL_RCC_OscConfig+0x930>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	61d3      	str	r3, [r2, #28]
 80041da:	4b54      	ldr	r3, [pc, #336]	; (800432c <HAL_RCC_OscConfig+0x930>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80041e2:	f107 0308 	add.w	r3, r7, #8
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f4:	4b4f      	ldr	r3, [pc, #316]	; (8004334 <HAL_RCC_OscConfig+0x938>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d11a      	bne.n	8004236 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004200:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <HAL_RCC_OscConfig+0x938>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a4b      	ldr	r2, [pc, #300]	; (8004334 <HAL_RCC_OscConfig+0x938>)
 8004206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420c:	f7fe fbb8 	bl	8002980 <HAL_GetTick>
 8004210:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	e009      	b.n	800422a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004216:	f7fe fbb3 	bl	8002980 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e2e9      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	4b42      	ldr	r3, [pc, #264]	; (8004334 <HAL_RCC_OscConfig+0x938>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ef      	beq.n	8004216 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x852>
 8004240:	4b3a      	ldr	r3, [pc, #232]	; (800432c <HAL_RCC_OscConfig+0x930>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4a39      	ldr	r2, [pc, #228]	; (800432c <HAL_RCC_OscConfig+0x930>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6213      	str	r3, [r2, #32]
 800424c:	e02f      	b.n	80042ae <HAL_RCC_OscConfig+0x8b2>
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_OscConfig+0x876>
 8004258:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_RCC_OscConfig+0x930>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4a33      	ldr	r2, [pc, #204]	; (800432c <HAL_RCC_OscConfig+0x930>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6213      	str	r3, [r2, #32]
 8004264:	4b31      	ldr	r3, [pc, #196]	; (800432c <HAL_RCC_OscConfig+0x930>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4a30      	ldr	r2, [pc, #192]	; (800432c <HAL_RCC_OscConfig+0x930>)
 800426a:	f023 0304 	bic.w	r3, r3, #4
 800426e:	6213      	str	r3, [r2, #32]
 8004270:	e01d      	b.n	80042ae <HAL_RCC_OscConfig+0x8b2>
 8004272:	1d3b      	adds	r3, r7, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d10c      	bne.n	8004296 <HAL_RCC_OscConfig+0x89a>
 800427c:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_RCC_OscConfig+0x930>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	4a2a      	ldr	r2, [pc, #168]	; (800432c <HAL_RCC_OscConfig+0x930>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6213      	str	r3, [r2, #32]
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCC_OscConfig+0x930>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	4a27      	ldr	r2, [pc, #156]	; (800432c <HAL_RCC_OscConfig+0x930>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6213      	str	r3, [r2, #32]
 8004294:	e00b      	b.n	80042ae <HAL_RCC_OscConfig+0x8b2>
 8004296:	4b25      	ldr	r3, [pc, #148]	; (800432c <HAL_RCC_OscConfig+0x930>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4a24      	ldr	r2, [pc, #144]	; (800432c <HAL_RCC_OscConfig+0x930>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6213      	str	r3, [r2, #32]
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_RCC_OscConfig+0x930>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	4a21      	ldr	r2, [pc, #132]	; (800432c <HAL_RCC_OscConfig+0x930>)
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d06b      	beq.n	8004390 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b8:	f7fe fb62 	bl	8002980 <HAL_GetTick>
 80042bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c0:	e00b      	b.n	80042da <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fe fb5d 	bl	8002980 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e291      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
 80042da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80042de:	2202      	movs	r2, #2
 80042e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	fa93 f2a3 	rbit	r2, r3
 80042ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80042f6:	2202      	movs	r2, #2
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	fa93 f2a3 	rbit	r2, r3
 8004304:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004308:	601a      	str	r2, [r3, #0]
  return result;
 800430a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800430e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f043 0302 	orr.w	r3, r3, #2
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d109      	bne.n	8004338 <HAL_RCC_OscConfig+0x93c>
 8004324:	4b01      	ldr	r3, [pc, #4]	; (800432c <HAL_RCC_OscConfig+0x930>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	e014      	b.n	8004354 <HAL_RCC_OscConfig+0x958>
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	10908120 	.word	0x10908120
 8004334:	40007000 	.word	0x40007000
 8004338:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800433c:	2202      	movs	r2, #2
 800433e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	4bbb      	ldr	r3, [pc, #748]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004358:	2102      	movs	r1, #2
 800435a:	6011      	str	r1, [r2, #0]
 800435c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	fa92 f1a2 	rbit	r1, r2
 8004366:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800436a:	6011      	str	r1, [r2, #0]
  return result;
 800436c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	fab2 f282 	clz	r2, r2
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	f002 021f 	and.w	r2, r2, #31
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f202 	lsl.w	r2, r1, r2
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d099      	beq.n	80042c2 <HAL_RCC_OscConfig+0x8c6>
 800438e:	e063      	b.n	8004458 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fe faf6 	bl	8002980 <HAL_GetTick>
 8004394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004398:	e00b      	b.n	80043b2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fe faf1 	bl	8002980 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e225      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
 80043b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043b6:	2202      	movs	r2, #2
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	fa93 f2a3 	rbit	r2, r3
 80043c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80043ce:	2202      	movs	r2, #2
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	fa93 f2a3 	rbit	r2, r3
 80043dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80043e0:	601a      	str	r2, [r3, #0]
  return result;
 80043e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80043e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f043 0302 	orr.w	r3, r3, #2
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d102      	bne.n	8004402 <HAL_RCC_OscConfig+0xa06>
 80043fc:	4b90      	ldr	r3, [pc, #576]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	e00d      	b.n	800441e <HAL_RCC_OscConfig+0xa22>
 8004402:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004406:	2202      	movs	r2, #2
 8004408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	fa93 f2a3 	rbit	r2, r3
 8004414:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	4b89      	ldr	r3, [pc, #548]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004422:	2102      	movs	r1, #2
 8004424:	6011      	str	r1, [r2, #0]
 8004426:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	fa92 f1a2 	rbit	r1, r2
 8004430:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004434:	6011      	str	r1, [r2, #0]
  return result;
 8004436:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	fab2 f282 	clz	r2, r2
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	f002 021f 	and.w	r2, r2, #31
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f202 	lsl.w	r2, r1, r2
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1a0      	bne.n	800439a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004458:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800445c:	2b01      	cmp	r3, #1
 800445e:	d105      	bne.n	800446c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004460:	4b77      	ldr	r3, [pc, #476]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4a76      	ldr	r2, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 8004466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800446a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 81c2 	beq.w	80047fc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004478:	4b71      	ldr	r3, [pc, #452]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b08      	cmp	r3, #8
 8004482:	f000 819c 	beq.w	80047be <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004486:	1d3b      	adds	r3, r7, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2b02      	cmp	r3, #2
 800448e:	f040 8114 	bne.w	80046ba <HAL_RCC_OscConfig+0xcbe>
 8004492:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004496:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800449a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044aa:	601a      	str	r2, [r3, #0]
  return result;
 80044ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	461a      	mov	r2, r3
 80044c4:	2300      	movs	r3, #0
 80044c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fa5a 	bl	8002980 <HAL_GetTick>
 80044cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d0:	e009      	b.n	80044e6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d2:	f7fe fa55 	bl	8002980 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e18b      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
 80044e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80044ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	fa93 f2a3 	rbit	r2, r3
 80044fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80044fe:	601a      	str	r2, [r3, #0]
  return result;
 8004500:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004504:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b01      	cmp	r3, #1
 8004518:	d102      	bne.n	8004520 <HAL_RCC_OscConfig+0xb24>
 800451a:	4b49      	ldr	r3, [pc, #292]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	e01b      	b.n	8004558 <HAL_RCC_OscConfig+0xb5c>
 8004520:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	fa93 f2a3 	rbit	r2, r3
 8004534:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800453e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	fa93 f2a3 	rbit	r2, r3
 800454e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800455c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	fa92 f1a2 	rbit	r1, r2
 800456c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004570:	6011      	str	r1, [r2, #0]
  return result;
 8004572:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	fab2 f282 	clz	r2, r2
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	f042 0220 	orr.w	r2, r2, #32
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	f002 021f 	and.w	r2, r2, #31
 8004588:	2101      	movs	r1, #1
 800458a:	fa01 f202 	lsl.w	r2, r1, r2
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d19e      	bne.n	80044d2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004594:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800459c:	1d3b      	adds	r3, r7, #4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	4925      	ldr	r1, [pc, #148]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
 80045b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fa93 f2a3 	rbit	r2, r3
 80045c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045c8:	601a      	str	r2, [r3, #0]
  return result;
 80045ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045ce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	461a      	mov	r2, r3
 80045e2:	2301      	movs	r3, #1
 80045e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fe f9cb 	bl	8002980 <HAL_GetTick>
 80045ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ee:	e009      	b.n	8004604 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe f9c6 	bl	8002980 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0fc      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
 8004604:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800460c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	fa93 f2a3 	rbit	r2, r3
 8004618:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800461c:	601a      	str	r2, [r3, #0]
  return result;
 800461e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004622:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <HAL_RCC_OscConfig+0xc48>
 8004638:	4b01      	ldr	r3, [pc, #4]	; (8004640 <HAL_RCC_OscConfig+0xc44>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	e01e      	b.n	800467c <HAL_RCC_OscConfig+0xc80>
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800464c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	fa93 f2a3 	rbit	r2, r3
 8004658:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	fa93 f2a3 	rbit	r2, r3
 8004672:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	4b63      	ldr	r3, [pc, #396]	; (8004808 <HAL_RCC_OscConfig+0xe0c>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004680:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004684:	6011      	str	r1, [r2, #0]
 8004686:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	fa92 f1a2 	rbit	r1, r2
 8004690:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004694:	6011      	str	r1, [r2, #0]
  return result;
 8004696:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	fab2 f282 	clz	r2, r2
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	f042 0220 	orr.w	r2, r2, #32
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	f002 021f 	and.w	r2, r2, #31
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f202 	lsl.w	r2, r1, r2
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d09b      	beq.n	80045f0 <HAL_RCC_OscConfig+0xbf4>
 80046b8:	e0a0      	b.n	80047fc <HAL_RCC_OscConfig+0xe00>
 80046ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	fa93 f2a3 	rbit	r2, r3
 80046ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046d2:	601a      	str	r2, [r3, #0]
  return result;
 80046d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	461a      	mov	r2, r3
 80046ec:	2300      	movs	r3, #0
 80046ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fe f946 	bl	8002980 <HAL_GetTick>
 80046f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f8:	e009      	b.n	800470e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fe f941 	bl	8002980 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e077      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
 800470e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	fa93 f2a3 	rbit	r2, r3
 8004722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004726:	601a      	str	r2, [r3, #0]
  return result;
 8004728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800472c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_RCC_OscConfig+0xd4c>
 8004742:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCC_OscConfig+0xe0c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	e01b      	b.n	8004780 <HAL_RCC_OscConfig+0xd84>
 8004748:	f107 0320 	add.w	r3, r7, #32
 800474c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	f107 0320 	add.w	r3, r7, #32
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	fa93 f2a3 	rbit	r2, r3
 800475c:	f107 031c 	add.w	r3, r7, #28
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f107 0318 	add.w	r3, r7, #24
 8004766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f107 0318 	add.w	r3, r7, #24
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	fa93 f2a3 	rbit	r2, r3
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_RCC_OscConfig+0xe0c>)
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	f107 0210 	add.w	r2, r7, #16
 8004784:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004788:	6011      	str	r1, [r2, #0]
 800478a:	f107 0210 	add.w	r2, r7, #16
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	fa92 f1a2 	rbit	r1, r2
 8004794:	f107 020c 	add.w	r2, r7, #12
 8004798:	6011      	str	r1, [r2, #0]
  return result;
 800479a:	f107 020c 	add.w	r2, r7, #12
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	fab2 f282 	clz	r2, r2
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	f042 0220 	orr.w	r2, r2, #32
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	f002 021f 	and.w	r2, r2, #31
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f202 	lsl.w	r2, r1, r2
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d19e      	bne.n	80046fa <HAL_RCC_OscConfig+0xcfe>
 80047bc:	e01e      	b.n	80047fc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e018      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <HAL_RCC_OscConfig+0xe0c>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d108      	bne.n	80047f8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80047e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000

0800480c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b09e      	sub	sp, #120	; 0x78
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e162      	b.n	8004aea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	4b90      	ldr	r3, [pc, #576]	; (8004a68 <HAL_RCC_ClockConfig+0x25c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d910      	bls.n	8004854 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b8d      	ldr	r3, [pc, #564]	; (8004a68 <HAL_RCC_ClockConfig+0x25c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 0207 	bic.w	r2, r3, #7
 800483a:	498b      	ldr	r1, [pc, #556]	; (8004a68 <HAL_RCC_ClockConfig+0x25c>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b89      	ldr	r3, [pc, #548]	; (8004a68 <HAL_RCC_ClockConfig+0x25c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e14a      	b.n	8004aea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004860:	4b82      	ldr	r3, [pc, #520]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	497f      	ldr	r1, [pc, #508]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80dc 	beq.w	8004a38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d13c      	bne.n	8004902 <HAL_RCC_ClockConfig+0xf6>
 8004888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800488c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004898:	fab3 f383 	clz	r3, r3
 800489c:	b2db      	uxtb	r3, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xa6>
 80048ac:	4b6f      	ldr	r3, [pc, #444]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	e00f      	b.n	80048d2 <HAL_RCC_ClockConfig+0xc6>
 80048b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	667b      	str	r3, [r7, #100]	; 0x64
 80048c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c4:	663b      	str	r3, [r7, #96]	; 0x60
 80048c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c8:	fa93 f3a3 	rbit	r3, r3
 80048cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ce:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80048d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048da:	fa92 f2a2 	rbit	r2, r2
 80048de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80048e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048e2:	fab2 f282 	clz	r2, r2
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	f042 0220 	orr.w	r2, r2, #32
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	f002 021f 	and.w	r2, r2, #31
 80048f2:	2101      	movs	r1, #1
 80048f4:	fa01 f202 	lsl.w	r2, r1, r2
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d17b      	bne.n	80049f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e0f3      	b.n	8004aea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d13c      	bne.n	8004984 <HAL_RCC_ClockConfig+0x178>
 800490a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800490e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004912:	fa93 f3a3 	rbit	r3, r3
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d102      	bne.n	8004934 <HAL_RCC_ClockConfig+0x128>
 800492e:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	e00f      	b.n	8004954 <HAL_RCC_ClockConfig+0x148>
 8004934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004938:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	647b      	str	r3, [r7, #68]	; 0x44
 8004942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004946:	643b      	str	r3, [r7, #64]	; 0x40
 8004948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494a:	fa93 f3a3 	rbit	r3, r3
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004950:	4b46      	ldr	r3, [pc, #280]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004958:	63ba      	str	r2, [r7, #56]	; 0x38
 800495a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800495c:	fa92 f2a2 	rbit	r2, r2
 8004960:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004964:	fab2 f282 	clz	r2, r2
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	f042 0220 	orr.w	r2, r2, #32
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	f002 021f 	and.w	r2, r2, #31
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f202 	lsl.w	r2, r1, r2
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d13a      	bne.n	80049f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0b2      	b.n	8004aea <HAL_RCC_ClockConfig+0x2de>
 8004984:	2302      	movs	r3, #2
 8004986:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	fa93 f3a3 	rbit	r3, r3
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004992:	fab3 f383 	clz	r3, r3
 8004996:	b2db      	uxtb	r3, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d102      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1a0>
 80049a6:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	e00d      	b.n	80049c8 <HAL_RCC_ClockConfig+0x1bc>
 80049ac:	2302      	movs	r3, #2
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	2302      	movs	r3, #2
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	2202      	movs	r2, #2
 80049ca:	61ba      	str	r2, [r7, #24]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	fa92 f2a2 	rbit	r2, r2
 80049d2:	617a      	str	r2, [r7, #20]
  return result;
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	fab2 f282 	clz	r2, r2
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	f042 0220 	orr.w	r2, r2, #32
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	f002 021f 	and.w	r2, r2, #31
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e079      	b.n	8004aea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f6:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f023 0203 	bic.w	r2, r3, #3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	491a      	ldr	r1, [pc, #104]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a08:	f7fd ffba 	bl	8002980 <HAL_GetTick>
 8004a0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a10:	f7fd ffb6 	bl	8002980 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e061      	b.n	8004aea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_RCC_ClockConfig+0x260>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 020c 	and.w	r2, r3, #12
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d1eb      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCC_ClockConfig+0x25c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d214      	bcs.n	8004a70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCC_ClockConfig+0x25c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 0207 	bic.w	r2, r3, #7
 8004a4e:	4906      	ldr	r1, [pc, #24]	; (8004a68 <HAL_RCC_ClockConfig+0x25c>)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <HAL_RCC_ClockConfig+0x25c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e040      	b.n	8004aea <HAL_RCC_ClockConfig+0x2de>
 8004a68:	40022000 	.word	0x40022000
 8004a6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <HAL_RCC_ClockConfig+0x2e8>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	491a      	ldr	r1, [pc, #104]	; (8004af4 <HAL_RCC_ClockConfig+0x2e8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a9a:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <HAL_RCC_ClockConfig+0x2e8>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4912      	ldr	r1, [pc, #72]	; (8004af4 <HAL_RCC_ClockConfig+0x2e8>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004aae:	f000 f829 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_RCC_ClockConfig+0x2e8>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004abc:	22f0      	movs	r2, #240	; 0xf0
 8004abe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	fa92 f2a2 	rbit	r2, r2
 8004ac6:	60fa      	str	r2, [r7, #12]
  return result;
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	fab2 f282 	clz	r2, r2
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	40d3      	lsrs	r3, r2
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <HAL_RCC_ClockConfig+0x2ec>)
 8004ad4:	5cd3      	ldrb	r3, [r2, r3]
 8004ad6:	fa21 f303 	lsr.w	r3, r1, r3
 8004ada:	4a08      	ldr	r2, [pc, #32]	; (8004afc <HAL_RCC_ClockConfig+0x2f0>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_RCC_ClockConfig+0x2f4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd ff08 	bl	80028f8 <HAL_InitTick>
  
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3778      	adds	r7, #120	; 0x78
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
 8004af8:	08006ab8 	.word	0x08006ab8
 8004afc:	20000000 	.word	0x20000000
 8004b00:	20000004 	.word	0x20000004

08004b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b08b      	sub	sp, #44	; 0x2c
 8004b08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b1e:	4b29      	ldr	r3, [pc, #164]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d002      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0x30>
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d003      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0x36>
 8004b32:	e03c      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b34:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b36:	623b      	str	r3, [r7, #32]
      break;
 8004b38:	e03c      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004b40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004b44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	fa92 f2a2 	rbit	r2, r2
 8004b4c:	607a      	str	r2, [r7, #4]
  return result;
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	fab2 f282 	clz	r2, r2
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	40d3      	lsrs	r3, r2
 8004b58:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b5a:	5cd3      	ldrb	r3, [r2, r3]
 8004b5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004b5e:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	220f      	movs	r2, #15
 8004b68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	fa92 f2a2 	rbit	r2, r2
 8004b70:	60fa      	str	r2, [r7, #12]
  return result;
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	fab2 f282 	clz	r2, r2
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	40d3      	lsrs	r3, r2
 8004b7c:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9c:	e004      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4a0c      	ldr	r2, [pc, #48]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	623b      	str	r3, [r7, #32]
      break;
 8004bac:	e002      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bb0:	623b      	str	r3, [r7, #32]
      break;
 8004bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	372c      	adds	r7, #44	; 0x2c
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	007a1200 	.word	0x007a1200
 8004bcc:	08006ad0 	.word	0x08006ad0
 8004bd0:	08006ae0 	.word	0x08006ae0
 8004bd4:	003d0900 	.word	0x003d0900

08004bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_RCC_GetHCLKFreq+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000000 	.word	0x20000000

08004bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004bf6:	f7ff ffef 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	fa92 f2a2 	rbit	r2, r2
 8004c10:	603a      	str	r2, [r7, #0]
  return result;
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	fab2 f282 	clz	r2, r2
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	40d3      	lsrs	r3, r2
 8004c1c:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	08006ac8 	.word	0x08006ac8

08004c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c3a:	f7ff ffcd 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004c3e:	4601      	mov	r1, r0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004c48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004c4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	fa92 f2a2 	rbit	r2, r2
 8004c54:	603a      	str	r2, [r7, #0]
  return result;
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	fab2 f282 	clz	r2, r2
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	40d3      	lsrs	r3, r2
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c62:	5cd3      	ldrb	r3, [r2, r3]
 8004c64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40021000 	.word	0x40021000
 8004c74:	08006ac8 	.word	0x08006ac8

08004c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b092      	sub	sp, #72	; 0x48
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80d7 	beq.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9c:	4b4e      	ldr	r3, [pc, #312]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca8:	4b4b      	ldr	r3, [pc, #300]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4a4a      	ldr	r2, [pc, #296]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	61d3      	str	r3, [r2, #28]
 8004cb4:	4b48      	ldr	r3, [pc, #288]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc6:	4b45      	ldr	r3, [pc, #276]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d118      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd2:	4b42      	ldr	r3, [pc, #264]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a41      	ldr	r2, [pc, #260]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cde:	f7fd fe4f 	bl	8002980 <HAL_GetTick>
 8004ce2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce6:	f7fd fe4b 	bl	8002980 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b64      	cmp	r3, #100	; 0x64
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e169      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d04:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8084 	beq.w	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d07c      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d24:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	fa93 f3a3 	rbit	r3, r3
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2301      	movs	r3, #1
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d62:	fab3 f383 	clz	r3, r3
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	461a      	mov	r2, r3
 8004d72:	2300      	movs	r3, #0
 8004d74:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04b      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fd fdfb 	bl	8002980 <HAL_GetTick>
 8004d8a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fd fdf7 	bl	8002980 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e113      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004da4:	2302      	movs	r3, #2
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	fa93 f3a3 	rbit	r3, r3
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
 8004db0:	2302      	movs	r3, #2
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	61fb      	str	r3, [r7, #28]
  return result;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004dd2:	4b01      	ldr	r3, [pc, #4]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	e00d      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40007000 	.word	0x40007000
 8004de0:	10908100 	.word	0x10908100
 8004de4:	2302      	movs	r3, #2
 8004de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2202      	movs	r2, #2
 8004df6:	613a      	str	r2, [r7, #16]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	fa92 f2a2 	rbit	r2, r2
 8004dfe:	60fa      	str	r2, [r7, #12]
  return result;
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	fab2 f282 	clz	r2, r2
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	f002 021f 	and.w	r2, r2, #31
 8004e12:	2101      	movs	r1, #1
 8004e14:	fa01 f202 	lsl.w	r2, r1, r2
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0b7      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e1e:	4b6d      	ldr	r3, [pc, #436]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	496a      	ldr	r1, [pc, #424]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e38:	4b66      	ldr	r3, [pc, #408]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	4a65      	ldr	r2, [pc, #404]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e50:	4b60      	ldr	r3, [pc, #384]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	f023 0203 	bic.w	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	495d      	ldr	r1, [pc, #372]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e6e:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4956      	ldr	r1, [pc, #344]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e8c:	4b51      	ldr	r3, [pc, #324]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	494e      	ldr	r1, [pc, #312]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eaa:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f023 0210 	bic.w	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	4947      	ldr	r1, [pc, #284]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ec8:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	493f      	ldr	r1, [pc, #252]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d008      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f023 0220 	bic.w	r2, r3, #32
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	4938      	ldr	r1, [pc, #224]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f04:	4b33      	ldr	r3, [pc, #204]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	4930      	ldr	r1, [pc, #192]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f22:	4b2c      	ldr	r3, [pc, #176]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	4929      	ldr	r1, [pc, #164]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f40:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	4921      	ldr	r1, [pc, #132]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f5e:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	491a      	ldr	r1, [pc, #104]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	4912      	ldr	r1, [pc, #72]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	4903      	ldr	r1, [pc, #12]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3748      	adds	r7, #72	; 0x48
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000

08004fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e01d      	b.n	8005026 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fd fab6 	bl	8002570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fb5e 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <HAL_TIM_Base_Start_IT+0x50>)
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b06      	cmp	r3, #6
 8005058:	d00b      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x42>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d007      	beq.n	8005072 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	00010007 	.word	0x00010007

08005084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e01d      	b.n	80050d2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fd fa2c 	bl	8002508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 fb08 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fe58 	bl	8005da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <HAL_TIM_PWM_Start+0x98>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_TIM_PWM_Start+0x4a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <HAL_TIM_PWM_Start+0x9c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00e      	beq.n	8005126 <HAL_TIM_PWM_Start+0x4a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_TIM_PWM_Start+0xa0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d009      	beq.n	8005126 <HAL_TIM_PWM_Start+0x4a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1a      	ldr	r2, [pc, #104]	; (8005180 <HAL_TIM_PWM_Start+0xa4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d004      	beq.n	8005126 <HAL_TIM_PWM_Start+0x4a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_TIM_PWM_Start+0xa8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d101      	bne.n	800512a <HAL_TIM_PWM_Start+0x4e>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_TIM_PWM_Start+0x50>
 800512a:	2300      	movs	r3, #0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800513e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <HAL_TIM_PWM_Start+0xac>)
 8005148:	4013      	ands	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b06      	cmp	r3, #6
 8005150:	d00b      	beq.n	800516a <HAL_TIM_PWM_Start+0x8e>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d007      	beq.n	800516a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40013400 	.word	0x40013400
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800
 8005188:	00010007 	.word	0x00010007

0800518c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e02d      	b.n	80051fc <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f825 	bl	8005204 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 fa83 	bl	80056d8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0208 	bic.w	r2, r2, #8
 80051e0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6819      	ldr	r1, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0202 	mvn.w	r2, #2
 8005244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa1e 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa10 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fa21 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0204 	mvn.w	r2, #4
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9f4 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9e6 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f9f7 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0208 	mvn.w	r2, #8
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f9ca 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9bc 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f9cd 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b10      	cmp	r3, #16
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0210 	mvn.w	r2, #16
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2208      	movs	r2, #8
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f9a0 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f992 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f9a3 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0201 	mvn.w	r2, #1
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fb fec8 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fd9e 	bl	8005f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fd91 	bl	8005f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f951 	bl	80056c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b20      	cmp	r3, #32
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0220 	mvn.w	r2, #32
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fd51 	bl	8005ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800546e:	2302      	movs	r3, #2
 8005470:	e105      	b.n	800567e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b14      	cmp	r3, #20
 8005486:	f200 80f0 	bhi.w	800566a <HAL_TIM_PWM_ConfigChannel+0x212>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054e5 	.word	0x080054e5
 8005494:	0800566b 	.word	0x0800566b
 8005498:	0800566b 	.word	0x0800566b
 800549c:	0800566b 	.word	0x0800566b
 80054a0:	08005525 	.word	0x08005525
 80054a4:	0800566b 	.word	0x0800566b
 80054a8:	0800566b 	.word	0x0800566b
 80054ac:	0800566b 	.word	0x0800566b
 80054b0:	08005567 	.word	0x08005567
 80054b4:	0800566b 	.word	0x0800566b
 80054b8:	0800566b 	.word	0x0800566b
 80054bc:	0800566b 	.word	0x0800566b
 80054c0:	080055a7 	.word	0x080055a7
 80054c4:	0800566b 	.word	0x0800566b
 80054c8:	0800566b 	.word	0x0800566b
 80054cc:	0800566b 	.word	0x0800566b
 80054d0:	080055e9 	.word	0x080055e9
 80054d4:	0800566b 	.word	0x0800566b
 80054d8:	0800566b 	.word	0x0800566b
 80054dc:	0800566b 	.word	0x0800566b
 80054e0:	08005629 	.word	0x08005629
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f984 	bl	80057f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0208 	orr.w	r2, r2, #8
 80054fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0204 	bic.w	r2, r2, #4
 800550e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6999      	ldr	r1, [r3, #24]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	619a      	str	r2, [r3, #24]
      break;
 8005522:	e0a3      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f9f4 	bl	8005918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6999      	ldr	r1, [r3, #24]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	619a      	str	r2, [r3, #24]
      break;
 8005564:	e082      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fa5d 	bl	8005a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0208 	orr.w	r2, r2, #8
 8005580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0204 	bic.w	r2, r2, #4
 8005590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	61da      	str	r2, [r3, #28]
      break;
 80055a4:	e062      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fac5 	bl	8005b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69d9      	ldr	r1, [r3, #28]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	021a      	lsls	r2, r3, #8
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	61da      	str	r2, [r3, #28]
      break;
 80055e6:	e041      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fb0e 	bl	8005c10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0208 	orr.w	r2, r2, #8
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0204 	bic.w	r2, r2, #4
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005626:	e021      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fb52 	bl	8005cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	021a      	lsls	r2, r3, #8
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005668:	e000      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800566a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop

08005688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3c      	ldr	r2, [pc, #240]	; (80057dc <TIM_Base_SetConfig+0x104>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_Base_SetConfig+0x38>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0x38>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a39      	ldr	r2, [pc, #228]	; (80057e0 <TIM_Base_SetConfig+0x108>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0x38>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a38      	ldr	r2, [pc, #224]	; (80057e4 <TIM_Base_SetConfig+0x10c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0x38>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a37      	ldr	r2, [pc, #220]	; (80057e8 <TIM_Base_SetConfig+0x110>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d108      	bne.n	8005722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2d      	ldr	r2, [pc, #180]	; (80057dc <TIM_Base_SetConfig+0x104>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01b      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005730:	d017      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <TIM_Base_SetConfig+0x108>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <TIM_Base_SetConfig+0x10c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00f      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <TIM_Base_SetConfig+0x110>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a27      	ldr	r2, [pc, #156]	; (80057ec <TIM_Base_SetConfig+0x114>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a26      	ldr	r2, [pc, #152]	; (80057f0 <TIM_Base_SetConfig+0x118>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a10      	ldr	r2, [pc, #64]	; (80057dc <TIM_Base_SetConfig+0x104>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0xe8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <TIM_Base_SetConfig+0x110>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0xe8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a10      	ldr	r2, [pc, #64]	; (80057ec <TIM_Base_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0xe8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a0f      	ldr	r2, [pc, #60]	; (80057f0 <TIM_Base_SetConfig+0x118>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0xe8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a0e      	ldr	r2, [pc, #56]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	615a      	str	r2, [r3, #20]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f023 0201 	bic.w	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f023 0302 	bic.w	r3, r3, #2
 8005844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <TIM_OC1_SetConfig+0x10c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00f      	beq.n	8005878 <TIM_OC1_SetConfig+0x80>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <TIM_OC1_SetConfig+0x110>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_OC1_SetConfig+0x80>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a2a      	ldr	r2, [pc, #168]	; (800590c <TIM_OC1_SetConfig+0x114>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_OC1_SetConfig+0x80>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a29      	ldr	r2, [pc, #164]	; (8005910 <TIM_OC1_SetConfig+0x118>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_OC1_SetConfig+0x80>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a28      	ldr	r2, [pc, #160]	; (8005914 <TIM_OC1_SetConfig+0x11c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d10c      	bne.n	8005892 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0308 	bic.w	r3, r3, #8
 800587e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <TIM_OC1_SetConfig+0x10c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00f      	beq.n	80058ba <TIM_OC1_SetConfig+0xc2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <TIM_OC1_SetConfig+0x110>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_OC1_SetConfig+0xc2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <TIM_OC1_SetConfig+0x114>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_OC1_SetConfig+0xc2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <TIM_OC1_SetConfig+0x118>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_OC1_SetConfig+0xc2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a17      	ldr	r2, [pc, #92]	; (8005914 <TIM_OC1_SetConfig+0x11c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d111      	bne.n	80058de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	621a      	str	r2, [r3, #32]
}
 80058f8:	bf00      	nop
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40013400 	.word	0x40013400
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800

08005918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f023 0210 	bic.w	r2, r3, #16
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0320 	bic.w	r3, r3, #32
 8005966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a28      	ldr	r2, [pc, #160]	; (8005a18 <TIM_OC2_SetConfig+0x100>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC2_SetConfig+0x6c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <TIM_OC2_SetConfig+0x104>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d10d      	bne.n	80059a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800598a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <TIM_OC2_SetConfig+0x100>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00f      	beq.n	80059c8 <TIM_OC2_SetConfig+0xb0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <TIM_OC2_SetConfig+0x104>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00b      	beq.n	80059c8 <TIM_OC2_SetConfig+0xb0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <TIM_OC2_SetConfig+0x108>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d007      	beq.n	80059c8 <TIM_OC2_SetConfig+0xb0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <TIM_OC2_SetConfig+0x10c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_OC2_SetConfig+0xb0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <TIM_OC2_SetConfig+0x110>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d113      	bne.n	80059f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40013400 	.word	0x40013400
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800

08005a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a27      	ldr	r2, [pc, #156]	; (8005b28 <TIM_OC3_SetConfig+0xfc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_OC3_SetConfig+0x6a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a26      	ldr	r2, [pc, #152]	; (8005b2c <TIM_OC3_SetConfig+0x100>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10d      	bne.n	8005ab2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1c      	ldr	r2, [pc, #112]	; (8005b28 <TIM_OC3_SetConfig+0xfc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00f      	beq.n	8005ada <TIM_OC3_SetConfig+0xae>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <TIM_OC3_SetConfig+0x100>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_OC3_SetConfig+0xae>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1a      	ldr	r2, [pc, #104]	; (8005b30 <TIM_OC3_SetConfig+0x104>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_OC3_SetConfig+0xae>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a19      	ldr	r2, [pc, #100]	; (8005b34 <TIM_OC3_SetConfig+0x108>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_OC3_SetConfig+0xae>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <TIM_OC3_SetConfig+0x10c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d113      	bne.n	8005b02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	621a      	str	r2, [r3, #32]
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40013400 	.word	0x40013400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800

08005b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	031b      	lsls	r3, r3, #12
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a18      	ldr	r2, [pc, #96]	; (8005bfc <TIM_OC4_SetConfig+0xc0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00f      	beq.n	8005bc0 <TIM_OC4_SetConfig+0x84>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <TIM_OC4_SetConfig+0xc4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00b      	beq.n	8005bc0 <TIM_OC4_SetConfig+0x84>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <TIM_OC4_SetConfig+0xc8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d007      	beq.n	8005bc0 <TIM_OC4_SetConfig+0x84>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <TIM_OC4_SetConfig+0xcc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_OC4_SetConfig+0x84>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <TIM_OC4_SetConfig+0xd0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d109      	bne.n	8005bd4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	019b      	lsls	r3, r3, #6
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40012c00 	.word	0x40012c00
 8005c00:	40013400 	.word	0x40013400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800

08005c10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <TIM_OC5_SetConfig+0xb4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00f      	beq.n	8005c8a <TIM_OC5_SetConfig+0x7a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <TIM_OC5_SetConfig+0xb8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <TIM_OC5_SetConfig+0x7a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <TIM_OC5_SetConfig+0xbc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <TIM_OC5_SetConfig+0x7a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a14      	ldr	r2, [pc, #80]	; (8005cd0 <TIM_OC5_SetConfig+0xc0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_OC5_SetConfig+0x7a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <TIM_OC5_SetConfig+0xc4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d109      	bne.n	8005c9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40013400 	.word	0x40013400
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800

08005cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	051b      	lsls	r3, r3, #20
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a18      	ldr	r2, [pc, #96]	; (8005d90 <TIM_OC6_SetConfig+0xb8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00f      	beq.n	8005d54 <TIM_OC6_SetConfig+0x7c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a17      	ldr	r2, [pc, #92]	; (8005d94 <TIM_OC6_SetConfig+0xbc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00b      	beq.n	8005d54 <TIM_OC6_SetConfig+0x7c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <TIM_OC6_SetConfig+0xc0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d007      	beq.n	8005d54 <TIM_OC6_SetConfig+0x7c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <TIM_OC6_SetConfig+0xc4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC6_SetConfig+0x7c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a14      	ldr	r2, [pc, #80]	; (8005da0 <TIM_OC6_SetConfig+0xc8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d109      	bne.n	8005d68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	029b      	lsls	r3, r3, #10
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40014400 	.word	0x40014400
 8005da0:	40014800 	.word	0x40014800

08005da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	2201      	movs	r2, #1
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1a      	ldr	r2, [r3, #32]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e063      	b.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d108      	bne.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d018      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d013      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00e      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d009      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10c      	bne.n	8005ebe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40014000 	.word	0x40014000

08005ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e040      	b.n	8005fc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fc fc14 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2224      	movs	r2, #36	; 0x24
 8005f58:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f986 	bl	800627c <UART_SetConfig>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e022      	b.n	8005fc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb94 	bl	80066b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fc1b 	bl	80067f4 <UART_CheckIdleState>
 8005fbe:	4603      	mov	r3, r0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fee:	4013      	ands	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d113      	bne.n	8006020 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8114 	beq.w	800623e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
      }
      return;
 800601e:	e10e      	b.n	800623e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 80d6 	beq.w	80061d4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d105      	bne.n	800603e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80cb 	beq.w	80061d4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <HAL_UART_IRQHandler+0x9e>
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2201      	movs	r2, #1
 8006058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800605e:	f043 0201 	orr.w	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00e      	beq.n	800608e <HAL_UART_IRQHandler+0xc6>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2202      	movs	r2, #2
 8006080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006086:	f043 0204 	orr.w	r2, r3, #4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00e      	beq.n	80060b6 <HAL_UART_IRQHandler+0xee>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2204      	movs	r2, #4
 80060a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ae:	f043 0202 	orr.w	r2, r3, #2
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d013      	beq.n	80060e8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2208      	movs	r2, #8
 80060da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e0:	f043 0208 	orr.w	r2, r3, #8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00f      	beq.n	8006112 <HAL_UART_IRQHandler+0x14a>
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8093 	beq.w	8006242 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006144:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b40      	cmp	r3, #64	; 0x40
 8006152:	d004      	beq.n	800615e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800615a:	2b00      	cmp	r3, #0
 800615c:	d031      	beq.n	80061c2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fc08 	bl	8006974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	2b40      	cmp	r3, #64	; 0x40
 8006170:	d123      	bne.n	80061ba <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006180:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d013      	beq.n	80061b2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800618e:	4a30      	ldr	r2, [pc, #192]	; (8006250 <HAL_UART_IRQHandler+0x288>)
 8006190:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006196:	4618      	mov	r0, r3
 8006198:	f7fc fd31 	bl	8002bfe <HAL_DMA_Abort_IT>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d016      	beq.n	80061d0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	e00e      	b.n	80061d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f858 	bl	8006268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	e00a      	b.n	80061d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f854 	bl	8006268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c0:	e006      	b.n	80061d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f850 	bl	8006268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80061ce:	e038      	b.n	8006242 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d0:	bf00      	nop
    return;
 80061d2:	e036      	b.n	8006242 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00d      	beq.n	80061fa <HAL_UART_IRQHandler+0x232>
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fc0d 	bl	8006a12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061f8:	e026      	b.n	8006248 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00d      	beq.n	8006220 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620a:	2b00      	cmp	r3, #0
 800620c:	d008      	beq.n	8006220 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006212:	2b00      	cmp	r3, #0
 8006214:	d017      	beq.n	8006246 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
    }
    return;
 800621e:	e012      	b.n	8006246 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00e      	beq.n	8006248 <HAL_UART_IRQHandler+0x280>
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fbd3 	bl	80069e0 <UART_EndTransmit_IT>
    return;
 800623a:	bf00      	nop
 800623c:	e004      	b.n	8006248 <HAL_UART_IRQHandler+0x280>
      return;
 800623e:	bf00      	nop
 8006240:	e002      	b.n	8006248 <HAL_UART_IRQHandler+0x280>
    return;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <HAL_UART_IRQHandler+0x280>
    return;
 8006246:	bf00      	nop
  }

}
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	080069b5 	.word	0x080069b5

08006254 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006284:	2300      	movs	r3, #0
 8006286:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062ae:	f023 030c 	bic.w	r3, r3, #12
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	6939      	ldr	r1, [r7, #16]
 80062b8:	430b      	orrs	r3, r1
 80062ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4aa9      	ldr	r2, [pc, #676]	; (80065a0 <UART_SetConfig+0x324>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d121      	bne.n	8006344 <UART_SetConfig+0xc8>
 8006300:	4ba8      	ldr	r3, [pc, #672]	; (80065a4 <UART_SetConfig+0x328>)
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	2b03      	cmp	r3, #3
 800630a:	d817      	bhi.n	800633c <UART_SetConfig+0xc0>
 800630c:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <UART_SetConfig+0x98>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	08006325 	.word	0x08006325
 8006318:	08006331 	.word	0x08006331
 800631c:	08006337 	.word	0x08006337
 8006320:	0800632b 	.word	0x0800632b
 8006324:	2301      	movs	r3, #1
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e0b2      	b.n	8006490 <UART_SetConfig+0x214>
 800632a:	2302      	movs	r3, #2
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e0af      	b.n	8006490 <UART_SetConfig+0x214>
 8006330:	2304      	movs	r3, #4
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e0ac      	b.n	8006490 <UART_SetConfig+0x214>
 8006336:	2308      	movs	r3, #8
 8006338:	77fb      	strb	r3, [r7, #31]
 800633a:	e0a9      	b.n	8006490 <UART_SetConfig+0x214>
 800633c:	2310      	movs	r3, #16
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	bf00      	nop
 8006342:	e0a5      	b.n	8006490 <UART_SetConfig+0x214>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a97      	ldr	r2, [pc, #604]	; (80065a8 <UART_SetConfig+0x32c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d123      	bne.n	8006396 <UART_SetConfig+0x11a>
 800634e:	4b95      	ldr	r3, [pc, #596]	; (80065a4 <UART_SetConfig+0x328>)
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635a:	d012      	beq.n	8006382 <UART_SetConfig+0x106>
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006360:	d802      	bhi.n	8006368 <UART_SetConfig+0xec>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d007      	beq.n	8006376 <UART_SetConfig+0xfa>
 8006366:	e012      	b.n	800638e <UART_SetConfig+0x112>
 8006368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800636c:	d00c      	beq.n	8006388 <UART_SetConfig+0x10c>
 800636e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006372:	d003      	beq.n	800637c <UART_SetConfig+0x100>
 8006374:	e00b      	b.n	800638e <UART_SetConfig+0x112>
 8006376:	2300      	movs	r3, #0
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e089      	b.n	8006490 <UART_SetConfig+0x214>
 800637c:	2302      	movs	r3, #2
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e086      	b.n	8006490 <UART_SetConfig+0x214>
 8006382:	2304      	movs	r3, #4
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e083      	b.n	8006490 <UART_SetConfig+0x214>
 8006388:	2308      	movs	r3, #8
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e080      	b.n	8006490 <UART_SetConfig+0x214>
 800638e:	2310      	movs	r3, #16
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	bf00      	nop
 8006394:	e07c      	b.n	8006490 <UART_SetConfig+0x214>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a84      	ldr	r2, [pc, #528]	; (80065ac <UART_SetConfig+0x330>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d123      	bne.n	80063e8 <UART_SetConfig+0x16c>
 80063a0:	4b80      	ldr	r3, [pc, #512]	; (80065a4 <UART_SetConfig+0x328>)
 80063a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80063a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063ac:	d012      	beq.n	80063d4 <UART_SetConfig+0x158>
 80063ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063b2:	d802      	bhi.n	80063ba <UART_SetConfig+0x13e>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <UART_SetConfig+0x14c>
 80063b8:	e012      	b.n	80063e0 <UART_SetConfig+0x164>
 80063ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063be:	d00c      	beq.n	80063da <UART_SetConfig+0x15e>
 80063c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063c4:	d003      	beq.n	80063ce <UART_SetConfig+0x152>
 80063c6:	e00b      	b.n	80063e0 <UART_SetConfig+0x164>
 80063c8:	2300      	movs	r3, #0
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e060      	b.n	8006490 <UART_SetConfig+0x214>
 80063ce:	2302      	movs	r3, #2
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e05d      	b.n	8006490 <UART_SetConfig+0x214>
 80063d4:	2304      	movs	r3, #4
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e05a      	b.n	8006490 <UART_SetConfig+0x214>
 80063da:	2308      	movs	r3, #8
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e057      	b.n	8006490 <UART_SetConfig+0x214>
 80063e0:	2310      	movs	r3, #16
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	bf00      	nop
 80063e6:	e053      	b.n	8006490 <UART_SetConfig+0x214>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a70      	ldr	r2, [pc, #448]	; (80065b0 <UART_SetConfig+0x334>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d123      	bne.n	800643a <UART_SetConfig+0x1be>
 80063f2:	4b6c      	ldr	r3, [pc, #432]	; (80065a4 <UART_SetConfig+0x328>)
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80063fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063fe:	d012      	beq.n	8006426 <UART_SetConfig+0x1aa>
 8006400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006404:	d802      	bhi.n	800640c <UART_SetConfig+0x190>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <UART_SetConfig+0x19e>
 800640a:	e012      	b.n	8006432 <UART_SetConfig+0x1b6>
 800640c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006410:	d00c      	beq.n	800642c <UART_SetConfig+0x1b0>
 8006412:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006416:	d003      	beq.n	8006420 <UART_SetConfig+0x1a4>
 8006418:	e00b      	b.n	8006432 <UART_SetConfig+0x1b6>
 800641a:	2300      	movs	r3, #0
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e037      	b.n	8006490 <UART_SetConfig+0x214>
 8006420:	2302      	movs	r3, #2
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e034      	b.n	8006490 <UART_SetConfig+0x214>
 8006426:	2304      	movs	r3, #4
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e031      	b.n	8006490 <UART_SetConfig+0x214>
 800642c:	2308      	movs	r3, #8
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e02e      	b.n	8006490 <UART_SetConfig+0x214>
 8006432:	2310      	movs	r3, #16
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	bf00      	nop
 8006438:	e02a      	b.n	8006490 <UART_SetConfig+0x214>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a5d      	ldr	r2, [pc, #372]	; (80065b4 <UART_SetConfig+0x338>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d123      	bne.n	800648c <UART_SetConfig+0x210>
 8006444:	4b57      	ldr	r3, [pc, #348]	; (80065a4 <UART_SetConfig+0x328>)
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800644c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006450:	d012      	beq.n	8006478 <UART_SetConfig+0x1fc>
 8006452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006456:	d802      	bhi.n	800645e <UART_SetConfig+0x1e2>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <UART_SetConfig+0x1f0>
 800645c:	e012      	b.n	8006484 <UART_SetConfig+0x208>
 800645e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006462:	d00c      	beq.n	800647e <UART_SetConfig+0x202>
 8006464:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006468:	d003      	beq.n	8006472 <UART_SetConfig+0x1f6>
 800646a:	e00b      	b.n	8006484 <UART_SetConfig+0x208>
 800646c:	2300      	movs	r3, #0
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e00e      	b.n	8006490 <UART_SetConfig+0x214>
 8006472:	2302      	movs	r3, #2
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	e00b      	b.n	8006490 <UART_SetConfig+0x214>
 8006478:	2304      	movs	r3, #4
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e008      	b.n	8006490 <UART_SetConfig+0x214>
 800647e:	2308      	movs	r3, #8
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e005      	b.n	8006490 <UART_SetConfig+0x214>
 8006484:	2310      	movs	r3, #16
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	bf00      	nop
 800648a:	e001      	b.n	8006490 <UART_SetConfig+0x214>
 800648c:	2310      	movs	r3, #16
 800648e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006498:	f040 808e 	bne.w	80065b8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800649c:	7ffb      	ldrb	r3, [r7, #31]
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d85e      	bhi.n	8006560 <UART_SetConfig+0x2e4>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <UART_SetConfig+0x22c>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064ed 	.word	0x080064ed
 80064b0:	0800650d 	.word	0x0800650d
 80064b4:	08006561 	.word	0x08006561
 80064b8:	08006529 	.word	0x08006529
 80064bc:	08006561 	.word	0x08006561
 80064c0:	08006561 	.word	0x08006561
 80064c4:	08006561 	.word	0x08006561
 80064c8:	08006549 	.word	0x08006549
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064cc:	f7fe fb90 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 80064d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	005a      	lsls	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	441a      	add	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	61bb      	str	r3, [r7, #24]
        break;
 80064ea:	e03c      	b.n	8006566 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ec:	f7fe fba2 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
 80064f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	005a      	lsls	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	441a      	add	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	fbb2 f3f3 	udiv	r3, r2, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	61bb      	str	r3, [r7, #24]
        break;
 800650a:	e02c      	b.n	8006566 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006516:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6852      	ldr	r2, [r2, #4]
 800651e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006522:	b29b      	uxth	r3, r3
 8006524:	61bb      	str	r3, [r7, #24]
        break;
 8006526:	e01e      	b.n	8006566 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006528:	f7fe faec 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 800652c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	005a      	lsls	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	441a      	add	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	61bb      	str	r3, [r7, #24]
        break;
 8006546:	e00e      	b.n	8006566 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	fbb2 f3f3 	udiv	r3, r2, r3
 800655a:	b29b      	uxth	r3, r3
 800655c:	61bb      	str	r3, [r7, #24]
        break;
 800655e:	e002      	b.n	8006566 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	75fb      	strb	r3, [r7, #23]
        break;
 8006564:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b0f      	cmp	r3, #15
 800656a:	d916      	bls.n	800659a <UART_SetConfig+0x31e>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006572:	d212      	bcs.n	800659a <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f023 030f 	bic.w	r3, r3, #15
 800657c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	b29b      	uxth	r3, r3
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	b29a      	uxth	r2, r3
 800658a:	897b      	ldrh	r3, [r7, #10]
 800658c:	4313      	orrs	r3, r2
 800658e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	897a      	ldrh	r2, [r7, #10]
 8006596:	60da      	str	r2, [r3, #12]
 8006598:	e07e      	b.n	8006698 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	75fb      	strb	r3, [r7, #23]
 800659e:	e07b      	b.n	8006698 <UART_SetConfig+0x41c>
 80065a0:	40013800 	.word	0x40013800
 80065a4:	40021000 	.word	0x40021000
 80065a8:	40004400 	.word	0x40004400
 80065ac:	40004800 	.word	0x40004800
 80065b0:	40004c00 	.word	0x40004c00
 80065b4:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 80065b8:	7ffb      	ldrb	r3, [r7, #31]
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d85b      	bhi.n	8006676 <UART_SetConfig+0x3fa>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <UART_SetConfig+0x348>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	08006607 	.word	0x08006607
 80065cc:	08006625 	.word	0x08006625
 80065d0:	08006677 	.word	0x08006677
 80065d4:	08006641 	.word	0x08006641
 80065d8:	08006677 	.word	0x08006677
 80065dc:	08006677 	.word	0x08006677
 80065e0:	08006677 	.word	0x08006677
 80065e4:	0800665f 	.word	0x0800665f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fe fb02 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 80065ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	085a      	lsrs	r2, r3, #1
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	441a      	add	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006600:	b29b      	uxth	r3, r3
 8006602:	61bb      	str	r3, [r7, #24]
        break;
 8006604:	e03a      	b.n	800667c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006606:	f7fe fb15 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
 800660a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	085a      	lsrs	r2, r3, #1
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	441a      	add	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	fbb2 f3f3 	udiv	r3, r2, r3
 800661e:	b29b      	uxth	r3, r3
 8006620:	61bb      	str	r3, [r7, #24]
        break;
 8006622:	e02b      	b.n	800667c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800662e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6852      	ldr	r2, [r2, #4]
 8006636:	fbb3 f3f2 	udiv	r3, r3, r2
 800663a:	b29b      	uxth	r3, r3
 800663c:	61bb      	str	r3, [r7, #24]
        break;
 800663e:	e01d      	b.n	800667c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006640:	f7fe fa60 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8006644:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	085a      	lsrs	r2, r3, #1
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	441a      	add	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	b29b      	uxth	r3, r3
 800665a:	61bb      	str	r3, [r7, #24]
        break;
 800665c:	e00e      	b.n	800667c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006670:	b29b      	uxth	r3, r3
 8006672:	61bb      	str	r3, [r7, #24]
        break;
 8006674:	e002      	b.n	800667c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
        break;
 800667a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	2b0f      	cmp	r3, #15
 8006680:	d908      	bls.n	8006694 <UART_SetConfig+0x418>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006688:	d204      	bcs.n	8006694 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	e001      	b.n	8006698 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop

080066b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ae:	d10a      	bne.n	80067c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006802:	f7fc f8bd 	bl	8002980 <HAL_GetTick>
 8006806:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b08      	cmp	r3, #8
 8006814:	d10e      	bne.n	8006834 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006816:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f82a 	bl	800687e <UART_WaitOnFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e020      	b.n	8006876 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b04      	cmp	r3, #4
 8006840:	d10e      	bne.n	8006860 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006842:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f814 	bl	800687e <UART_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e00a      	b.n	8006876 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688e:	e05d      	b.n	800694c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006896:	d059      	beq.n	800694c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006898:	f7fc f872 	bl	8002980 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d302      	bcc.n	80068ae <UART_WaitOnFlagUntilTimeout+0x30>
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d11b      	bne.n	80068e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e042      	b.n	800696c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d02b      	beq.n	800694c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006902:	d123      	bne.n	800694c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800690c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800691c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e00f      	b.n	800696c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69da      	ldr	r2, [r3, #28]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	429a      	cmp	r2, r3
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	429a      	cmp	r2, r3
 8006968:	d092      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800698a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7ff fc48 	bl	8006268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff fc25 	bl	8006254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <__libc_init_array>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	4e0d      	ldr	r6, [pc, #52]	; (8006a60 <__libc_init_array+0x38>)
 8006a2c:	4c0d      	ldr	r4, [pc, #52]	; (8006a64 <__libc_init_array+0x3c>)
 8006a2e:	1ba4      	subs	r4, r4, r6
 8006a30:	10a4      	asrs	r4, r4, #2
 8006a32:	2500      	movs	r5, #0
 8006a34:	42a5      	cmp	r5, r4
 8006a36:	d109      	bne.n	8006a4c <__libc_init_array+0x24>
 8006a38:	4e0b      	ldr	r6, [pc, #44]	; (8006a68 <__libc_init_array+0x40>)
 8006a3a:	4c0c      	ldr	r4, [pc, #48]	; (8006a6c <__libc_init_array+0x44>)
 8006a3c:	f000 f820 	bl	8006a80 <_init>
 8006a40:	1ba4      	subs	r4, r4, r6
 8006a42:	10a4      	asrs	r4, r4, #2
 8006a44:	2500      	movs	r5, #0
 8006a46:	42a5      	cmp	r5, r4
 8006a48:	d105      	bne.n	8006a56 <__libc_init_array+0x2e>
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a50:	4798      	blx	r3
 8006a52:	3501      	adds	r5, #1
 8006a54:	e7ee      	b.n	8006a34 <__libc_init_array+0xc>
 8006a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a5a:	4798      	blx	r3
 8006a5c:	3501      	adds	r5, #1
 8006a5e:	e7f2      	b.n	8006a46 <__libc_init_array+0x1e>
 8006a60:	08006af0 	.word	0x08006af0
 8006a64:	08006af0 	.word	0x08006af0
 8006a68:	08006af0 	.word	0x08006af0
 8006a6c:	08006af4 	.word	0x08006af4

08006a70 <memset>:
 8006a70:	4402      	add	r2, r0
 8006a72:	4603      	mov	r3, r0
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d100      	bne.n	8006a7a <memset+0xa>
 8006a78:	4770      	bx	lr
 8006a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7e:	e7f9      	b.n	8006a74 <memset+0x4>

08006a80 <_init>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr

08006a8c <_fini>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr
